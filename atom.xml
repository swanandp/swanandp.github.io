<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Swanand Pagnis]]></title>
  <link href="http://swanandp.github.io/atom.xml" rel="self"/>
  <link href="http://swanandp.github.io/"/>
  <updated>2019-08-07T09:56:34+05:30</updated>
  <id>http://swanandp.github.io/</id>
  <author>
    <name><![CDATA[Swanand Pagnis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Demystifying SQL Queries]]></title>
    <link href="http://swanandp.github.io/blog/2017/08/19/deconstructing-sql-queries/"/>
    <updated>2017-08-19T11:36:19+05:30</updated>
    <id>http://swanandp.github.io/blog/2017/08/19/deconstructing-sql-queries</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s look at an average, everyday SQL query:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">something</span>
</span><span class='line'><span class="k">FROM</span> <span class="k">table</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">conditions</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not hard to draw parallels to other known concepts: <!-- more --></p>

<ol>
<li>FROM table: A set of elements</li>
<li>WHERE conditions:  A filter operation on these elements</li>
<li>SELECT something: A presenter of an individual element</li>
</ol>


<h2>Tables are sets</h2>

<p>The bare minimum way of interacting with a set, is to take a look at <em>some or all</em> of its elements. That is exactly what this query is doing. We&rsquo;re selecting a subset of a set, based on a few conditions, and representing each element of this subset in some format.  Recall that a subset of a set is <em>also a set</em> in itself.  Which allows us to do something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">something</span>
</span><span class='line'><span class="k">FROM</span> <span class="p">(</span>
</span><span class='line'>  <span class="k">SELECT</span> <span class="n">something</span>
</span><span class='line'>  <span class="k">FROM</span> <span class="k">table</span>
</span><span class='line'>  <span class="k">WHERE</span> <span class="n">conditions</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">conditions</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have a nested query, where instead of selecting from a table, we&rsquo;re selecting from the result of selecting from a table. <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>Sets can have labels or aliases, so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">a_name</span><span class="p">.</span><span class="n">something</span>
</span><span class='line'><span class="k">FROM</span> <span class="p">(</span>
</span><span class='line'>  <span class="k">SELECT</span> <span class="n">something</span>
</span><span class='line'>  <span class="k">FROM</span> <span class="k">table</span>
</span><span class='line'>  <span class="k">WHERE</span> <span class="n">conditions</span>
</span><span class='line'><span class="p">)</span> <span class="k">as</span> <span class="n">a_name</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">conditions</span>
</span></code></pre></td></tr></table></div></figure>


<p>We seem to be doing some recursive looking stuff, and I find it beautiful.</p>

<p>Which also means, an assertion is in order: <strong>a select query operates upon a set, and returns a set</strong>.  Naturally, a set can be a that of a single element as well.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">FROM</span> <span class="k">table</span> <span class="k">WHERE</span> <span class="n">conditions</span>
</span><span class='line'><span class="c1">--- better yet:</span>
</span><span class='line'><span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">as</span> <span class="n">something</span> <span class="k">FROM</span> <span class="k">table</span> <span class="k">WHERE</span> <span class="n">conditions</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s substitute <em>this set</em> in our original query:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">the</span> <span class="n">same</span> <span class="n">something</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>  <span class="p">(</span><span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">as</span> <span class="n">something</span> <span class="k">FROM</span> <span class="k">table</span> <span class="k">WHERE</span> <span class="n">conditions</span><span class="p">)</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">conditions</span>
</span></code></pre></td></tr></table></div></figure>


<p>So a select query operates upon a set, and returns a set, and we know that sets can be unioned or intersected:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'>  <span class="k">SELECT</span> <span class="n">something</span>
</span><span class='line'>  <span class="k">FROM</span> <span class="p">(</span><span class="n">a</span> <span class="k">set</span><span class="p">)</span>
</span><span class='line'>  <span class="k">WHERE</span> <span class="n">conditions</span>
</span><span class='line'><span class="k">UNION</span> <span class="c1">-- or INTERSECTION</span>
</span><span class='line'>  <span class="k">SELECT</span> <span class="n">the</span> <span class="n">same</span> <span class="n">something</span>
</span><span class='line'>  <span class="k">FROM</span> <span class="p">(</span><span class="n">a</span> <span class="k">similar</span> <span class="k">set</span><span class="p">)</span>
</span><span class='line'>  <span class="k">WHERE</span> <span class="n">conditions</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that &ldquo;something&rdquo; and &ldquo;the same something&rdquo; are important.  We can only union or intersection similar sets.  Apples and oranges can&rsquo;t be unioned in the relational algebra land.</p>

<h2>Joins are Sets</h2>

<p>Let&rsquo;s talk about joins.  Chances are, at some point in life you&rsquo;ve written in INNER JOIN instead of an OUTER JOIN and got incorrect results.  Or something along those lines.  Joins can be very opaque, even to a regular practitioner.</p>

<p>A few things are important when considering joins:</p>

<ol>
<li>A join is a product of 2 sets. Always. Multi-table joins are just &ldquo;first join these two&rdquo;, &ldquo;take the result&rdquo; and &ldquo;join the result with the next&rdquo;.</li>
<li>Joins are always performed on sets.  So you can &ldquo;join&rdquo; any of the above mentioned sets, and you&rsquo;re still good. Do note that language semantics dictate that you use aliases to disambiguate.</li>
<li>NULL is always a part of each set.  Implicitly so, for practicality.</li>
</ol>


<p>This is best explained through an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="err">{</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="err">}</span>
</span><span class='line'><span class="n">letters</span> <span class="o">=</span> <span class="err">{</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="k">c</span> <span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Joining <code>numbers</code> and <code>letters</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">numbers</span> <span class="o">|</span> <span class="n">letters</span>
</span><span class='line'><span class="c1">--------|---------</span>
</span><span class='line'><span class="k">NULL</span>    <span class="o">|</span> <span class="k">NULL</span>
</span><span class='line'><span class="k">NULL</span>    <span class="o">|</span> <span class="n">a</span>
</span><span class='line'><span class="k">NULL</span>    <span class="o">|</span> <span class="n">b</span>
</span><span class='line'><span class="k">NULL</span>    <span class="o">|</span> <span class="k">c</span>
</span><span class='line'><span class="mi">1</span>       <span class="o">|</span> <span class="k">NULL</span>
</span><span class='line'><span class="mi">1</span>       <span class="o">|</span> <span class="n">a</span>
</span><span class='line'><span class="mi">1</span>       <span class="o">|</span> <span class="n">b</span>
</span><span class='line'><span class="mi">1</span>       <span class="o">|</span> <span class="k">c</span>
</span><span class='line'><span class="mi">2</span>       <span class="o">|</span> <span class="k">NULL</span>
</span><span class='line'><span class="mi">2</span>       <span class="o">|</span> <span class="n">a</span>
</span><span class='line'><span class="mi">2</span>       <span class="o">|</span> <span class="n">b</span>
</span><span class='line'><span class="mi">2</span>       <span class="o">|</span> <span class="k">c</span>
</span><span class='line'><span class="mi">3</span>       <span class="o">|</span> <span class="k">NULL</span>
</span><span class='line'><span class="mi">3</span>       <span class="o">|</span> <span class="n">a</span>
</span><span class='line'><span class="mi">3</span>       <span class="o">|</span> <span class="n">b</span>
</span><span class='line'><span class="mi">3</span>       <span class="o">|</span> <span class="k">c</span>
</span></code></pre></td></tr></table></div></figure>


<p>Do you get the feeling that you are getting more than what you bargained for?  Me too.  Depending on context, we&rsquo;ll want different subsets of this mega joined set.  That&rsquo;s exactly what different kinds of joins are for.  These joins will determine what working set we&rsquo;ll use.</p>

<ol>
<li>Inner join:  Do not consider the entries which have NULL on either side.</li>
<li>Left outer join: Do not consider entries which have NULL on the LEFT side.</li>
<li>Right outer join: Do not consider entries which have NULL of the RIGHT side.</li>
<li>Full outer join: Consider all entries.</li>
</ol>


<p>For practical reasons, the entry where both sides are NULL is not considered.
A slightly better example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="err">{</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="n">a</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="n">b</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="k">c</span><span class="p">]</span> <span class="err">}</span>
</span><span class='line'><span class="n">letters</span> <span class="o">=</span> <span class="err">{</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">x</span><span class="p">],</span> <span class="p">[</span><span class="n">b</span><span class="p">,</span> <span class="n">y</span><span class="p">],</span> <span class="p">[</span><span class="k">c</span><span class="p">,</span> <span class="n">z</span><span class="p">]</span> <span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">JOIN</span>
</span><span class='line'>  <span class="n">numbers</span> <span class="k">AND</span> <span class="n">letters</span>
</span><span class='line'><span class="k">ON</span> <span class="k">second</span> <span class="n">element</span> <span class="k">of</span> <span class="nb">number</span> <span class="o">=</span> <span class="k">first</span> <span class="n">element</span> <span class="k">of</span> <span class="n">letter</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our working set:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">numbers</span> <span class="o">|</span> <span class="n">letters</span>
</span><span class='line'><span class="c1">--------|---------</span>
</span><span class='line'><span class="k">NULL</span>    <span class="o">|</span> <span class="k">NULL</span>
</span><span class='line'><span class="k">NULL</span>    <span class="o">|</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">x</span><span class="p">]</span>
</span><span class='line'><span class="k">NULL</span>    <span class="o">|</span> <span class="p">[</span><span class="n">b</span><span class="p">,</span> <span class="n">y</span><span class="p">]</span>
</span><span class='line'><span class="k">NULL</span>    <span class="o">|</span> <span class="p">[</span><span class="k">c</span><span class="p">,</span> <span class="n">z</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="n">a</span><span class="p">]</span>  <span class="o">|</span> <span class="k">NULL</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="n">a</span><span class="p">]</span>  <span class="o">|</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">x</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="n">a</span><span class="p">]</span>  <span class="o">|</span> <span class="p">[</span><span class="n">b</span><span class="p">,</span> <span class="n">y</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="n">a</span><span class="p">]</span>  <span class="o">|</span> <span class="p">[</span><span class="k">c</span><span class="p">,</span> <span class="n">z</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="n">b</span><span class="p">]</span>  <span class="o">|</span> <span class="k">NULL</span>
</span><span class='line'><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="n">b</span><span class="p">]</span>  <span class="o">|</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">x</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="n">b</span><span class="p">]</span>  <span class="o">|</span> <span class="p">[</span><span class="n">b</span><span class="p">,</span> <span class="n">y</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="n">b</span><span class="p">]</span>  <span class="o">|</span> <span class="p">[</span><span class="k">c</span><span class="p">,</span> <span class="n">z</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="k">c</span><span class="p">]</span>  <span class="o">|</span> <span class="k">NULL</span>
</span><span class='line'><span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="k">c</span><span class="p">]</span>  <span class="o">|</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">x</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="k">c</span><span class="p">]</span>  <span class="o">|</span> <span class="p">[</span><span class="n">b</span><span class="p">,</span> <span class="n">y</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="k">c</span><span class="p">]</span>  <span class="o">|</span> <span class="p">[</span><span class="k">c</span><span class="p">,</span> <span class="n">z</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>After applying conditions, and removing both sides NULL entry:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">numbers</span> <span class="o">|</span> <span class="n">letters</span>
</span><span class='line'><span class="c1">--------|---------</span>
</span><span class='line'><span class="k">NULL</span>    <span class="o">|</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">x</span><span class="p">]</span>
</span><span class='line'><span class="k">NULL</span>    <span class="o">|</span> <span class="p">[</span><span class="n">b</span><span class="p">,</span> <span class="n">y</span><span class="p">]</span>
</span><span class='line'><span class="k">NULL</span>    <span class="o">|</span> <span class="p">[</span><span class="k">c</span><span class="p">,</span> <span class="n">z</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="n">a</span><span class="p">]</span>  <span class="o">|</span> <span class="k">NULL</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="n">a</span><span class="p">]</span>  <span class="o">|</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">x</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="n">b</span><span class="p">]</span>  <span class="o">|</span> <span class="k">NULL</span>
</span><span class='line'><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="n">b</span><span class="p">]</span>  <span class="o">|</span> <span class="p">[</span><span class="n">b</span><span class="p">,</span> <span class="n">y</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="k">c</span><span class="p">]</span>  <span class="o">|</span> <span class="k">NULL</span>
</span><span class='line'><span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="k">c</span><span class="p">]</span>  <span class="o">|</span> <span class="p">[</span><span class="k">c</span><span class="p">,</span> <span class="n">z</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rearranging a little, for better understanding:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">numbers</span> <span class="o">|</span> <span class="n">letters</span> <span class="o">|</span> <span class="n">included</span> <span class="k">in</span>
</span><span class='line'><span class="c1">--------|---------|-----------</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="n">a</span><span class="p">]</span>  <span class="o">|</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">x</span><span class="p">]</span>  <span class="o">|</span> <span class="k">Full</span><span class="p">,</span> <span class="k">Inner</span><span class="p">,</span> <span class="k">Left</span> <span class="k">and</span> <span class="k">Right</span>
</span><span class='line'><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="n">b</span><span class="p">]</span>  <span class="o">|</span> <span class="p">[</span><span class="n">b</span><span class="p">,</span> <span class="n">y</span><span class="p">]</span>  <span class="o">|</span> <span class="k">Full</span><span class="p">,</span> <span class="k">Inner</span><span class="p">,</span> <span class="k">Left</span> <span class="k">and</span> <span class="k">Right</span>
</span><span class='line'><span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="k">c</span><span class="p">]</span>  <span class="o">|</span> <span class="p">[</span><span class="k">c</span><span class="p">,</span> <span class="n">z</span><span class="p">]</span>  <span class="o">|</span> <span class="k">Full</span><span class="p">,</span> <span class="k">Inner</span><span class="p">,</span> <span class="k">Left</span> <span class="k">and</span> <span class="k">Right</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="n">a</span><span class="p">]</span>  <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span> <span class="k">Full</span> <span class="k">and</span> <span class="k">Left</span>
</span><span class='line'><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="n">b</span><span class="p">]</span>  <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span> <span class="k">Full</span> <span class="k">and</span> <span class="k">Left</span>
</span><span class='line'><span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="k">c</span><span class="p">]</span>  <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span> <span class="k">Full</span> <span class="k">and</span> <span class="k">Left</span>
</span><span class='line'><span class="k">NULL</span>    <span class="o">|</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">x</span><span class="p">]</span>  <span class="o">|</span> <span class="k">Full</span> <span class="k">and</span> <span class="k">Right</span>
</span><span class='line'><span class="k">NULL</span>    <span class="o">|</span> <span class="p">[</span><span class="n">b</span><span class="p">,</span> <span class="n">y</span><span class="p">]</span>  <span class="o">|</span> <span class="k">Full</span> <span class="k">and</span> <span class="k">Right</span>
</span><span class='line'><span class="k">NULL</span>    <span class="o">|</span> <span class="p">[</span><span class="k">c</span><span class="p">,</span> <span class="n">z</span><span class="p">]</span>  <span class="o">|</span> <span class="k">Full</span> <span class="k">and</span> <span class="k">Right</span>
</span></code></pre></td></tr></table></div></figure>


<p>Left and Right are determined from the join syntax.  When A joins B, A is Left, and B is Right.</p>

<p>While attempting to write a join query, I encourage you to work out your join on paper first, with dummy data.  Specially with multi-table joins.</p>

<h2>Functions are Sets</h2>

<p>That sounded nice, but it isn&rsquo;t true. Functions aren&rsquo;t sets, they <em>operate</em> on sets.  Remember, a single value is also a set, so <strong>each function accepts a set as an argument, and returns a set</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">anything</span><span class="p">.</span><span class="n">today</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'><span class="p">(</span> <span class="k">SELECT</span> <span class="n">now</span><span class="p">()</span> <span class="k">AS</span> <span class="n">today</span> <span class="p">)</span> <span class="k">AS</span> <span class="n">anything</span>
</span></code></pre></td></tr></table></div></figure>


<p>My apologies for dropping a query on you without any domain context, but consider this slightly more complex function, which returns all the sibling branches of a given restaurant branch.  Restaurant has many Restaurant Branches, and Restaurant Branch belongs to a Restaurant, to aid your understanding.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">FUNCTION</span> <span class="n">co_branches</span><span class="p">(</span><span class="n">branch_id</span> <span class="nb">BIGINT</span><span class="p">)</span>
</span><span class='line'>  <span class="k">RETURNS</span> <span class="k">TABLE</span><span class="p">(</span><span class="n">id</span> <span class="nb">BIGINT</span><span class="p">)</span>
</span><span class='line'><span class="k">AS</span> <span class="err">$</span><span class="k">function</span><span class="err">$</span>
</span><span class='line'>
</span><span class='line'><span class="k">SELECT</span> <span class="n">b2</span><span class="p">.</span><span class="n">id</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>  <span class="n">restaurant_branches</span> <span class="n">b1</span>
</span><span class='line'>  <span class="k">JOIN</span> <span class="n">restaurant_branches</span> <span class="n">b2</span> <span class="k">ON</span> <span class="n">b1</span><span class="p">.</span><span class="n">restaurant_id</span> <span class="o">=</span> <span class="n">b2</span><span class="p">.</span><span class="n">restaurant_id</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">b1</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">branch_id</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span><span class="k">function</span><span class="err">$</span>
</span><span class='line'><span class="k">LANGUAGE</span> <span class="k">SQL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">--- used simply:</span>
</span><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">COBRANCHES</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span> <span class="c1">-- Co-branches of Branch#42</span>
</span><span class='line'><span class="c1">--- But more powerful, when used like:</span>
</span><span class='line'><span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="p">(</span><span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">COBRANCHES</span><span class="p">(</span><span class="n">id</span><span class="p">))</span> <span class="k">as</span> <span class="n">branch_count</span> <span class="k">FROM</span> <span class="n">restaurant_branches</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re basically replacing a query with a function.  And we learned that both SELECT queries and Functions operate on sets, and return sets.</p>

<p>Which brings me to another assertion: <strong>Sets and set operations tend to compose well.</strong>  This is very important! Functional programming nerds practically live by this motto.  Once you have small units that compose well, you can build complex units with relative simplicity.</p>

<p>Fundamentally, SQL is not so different.  An important thing to keep in mind that this composing behaviour is mainly about the data and how the data is interpreted and processed. The query language itself leaves a lot to be desired when it comes to composing.  A lot of things like aliases, joins can easily be taken care by a competent library.  But, more or on this, and the advantages of using something like ARel in a later post.</p>

<h2>Reading is destructuring, Writing is composing</h2>

<p>Let&rsquo;s collect all the set-like behaviour we&rsquo;ve seen so far:</p>

<ul>
<li>We can interact with a set by looking at all or some of its elements</li>
<li>A subset of a set is <em>also a set</em> in itself</li>
<li>A set can have a label or an alias</li>
<li>A set can be a that of a single element as well</li>
<li>A set can be unioned or intersected with another set</li>
</ul>


<p>Reading or writing complex queries becomes much easier, if we think of it as composing queries together, or decomposing a large query into smaller parts.</p>

<h3>How to read complex queries</h3>

<ul>
<li>Start with the innermost, or smallest &ldquo;SELECT&rdquo; clauses</li>
<li>Replace them with an appropriately and descriptively named function, say <code>co_branches_of_given_branch</code> instead of just <code>co_branches</code>.

<ul>
<li>If these inner queries, now functions, use a column / value from the outer queries, treat them as function arguments. ( <code>co_branches</code> used <code>branch_id</code> )</li>
</ul>
</li>
<li>Keep applying this method until you reach the outermost query.</li>
</ul>


<h3>How to write complex queries</h3>

<p>This really boils down to a top-down vs bottom-up approach. If you&rsquo;re a top-down person:
&ndash; Write the top-most query, assume all the lower level functions exist, with appropriate and descriptive names.
&ndash; Recursively, apply the same strategy to each lower level function</p>

<p>Conversely, if you&rsquo;re a bottom-up person:
&ndash; Figure out the lowest level functions / queries you need, and write them
&ndash; Build up your larger query by composing these functions.</p>

<!-- Links and footnotes -->



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Food for thought: How many nested select queries does your favourite relational database allow?<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Consuming HTTP APIs in Ruby]]></title>
    <link href="http://swanandp.github.io/blog/2017/07/08/consuming-http-apis-in-ruby/"/>
    <updated>2017-07-08T18:07:41+05:30</updated>
    <id>http://swanandp.github.io/blog/2017/07/08/consuming-http-apis-in-ruby</id>
    <content type="html"><![CDATA[<p>What is your favourite technique for consuming HTTP APIs in Ruby?  I like using <a href="https://github.com/jnunemaker/httparty">HTTParty</a>!</p>

<ul>
<li>It offers a simple, intuitive API.</li>
<li>It makes it easy to support a whole bunch of standard API authentication mechanisms. <!-- more --></li>
<li>It de-serialises responses based on content type headers.</li>
<li>It allows us to write simple wrappers that are very close in form to the API we want to communicate with.</li>
<li>It has a nice name!  And we know <a href="https://twitter.com/timbray/status/817025379109990402?cn=cmVwbHk%3D">how hard it is to name things</a>.</li>
</ul>


<p>I have come to employ a few patterns when working with HTTParty.  They are all centered around having a convenient internal API to work with, and the ease of testing.</p>

<p>Most APIs I&rsquo;ve worked with have one of the following authentication mechanism:</p>

<ul>
<li>HTTP Basic Authentication</li>
<li>HTTP Digest Authentication</li>
<li>Auth token in header</li>
<li>API key in query params / request body</li>
</ul>


<p>I am really fond of examples, so let&rsquo;s consider an example.  A RESTful service, where we interact with the &ldquo;Article&rdquo; resource.  We&rsquo;re able to list articles, get details about an article, create, update &amp; delete an article.  The service demands HTTP Basic auth, and JSON encoding.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ArticlesService</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">HTTParty</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">base_uri</span> <span class="s2">&quot;https://api.example.com&quot;</span>
</span><span class='line'>  <span class="n">read_timeout</span> <span class="mi">5</span> <span class="c1"># always have timeouts!</span>
</span><span class='line'>  <span class="c1"># debug_output $stdout # for quick access during debugging</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:auth</span><span class="p">,</span> <span class="ss">:headers</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@auth</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">username</span><span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;API_USERNAME&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">password</span><span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;API_PASSWORD&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@headers</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;Content-Type&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;application/json&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="n">get</span><span class="p">(</span><span class="s2">&quot;articles&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">article_id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">get</span><span class="p">(</span><span class="s2">&quot;articles/</span><span class="si">#{</span><span class="n">article_id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">post</span><span class="p">(</span>
</span><span class='line'>      <span class="n">endpoint</span><span class="p">(</span><span class="s2">&quot;articles&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="n">default_options</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="ss">body</span><span class="p">:</span> <span class="n">attributes</span><span class="o">.</span><span class="n">to_json</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">article_id</span><span class="p">,</span> <span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">patch</span><span class="p">(</span>
</span><span class='line'>      <span class="n">endpoint</span><span class="p">(</span><span class="s2">&quot;articles/</span><span class="si">#{</span><span class="n">article_id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="n">default_options</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="ss">body</span><span class="p">:</span> <span class="n">attributes</span><span class="o">.</span><span class="n">to_json</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">destroy</span><span class="p">(</span><span class="n">article_id</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span>
</span><span class='line'>      <span class="n">endpoint</span><span class="p">(</span><span class="s2">&quot;articles/</span><span class="si">#{</span><span class="n">article_id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="n">default_options</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">protected</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">default_options</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="ss">headers</span><span class="p">:</span> <span class="n">headers</span><span class="p">,</span>
</span><span class='line'>      <span class="n">basic_auth</span><span class="p">:</span> <span class="n">auth</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">endpoint</span><span class="p">(</span><span class="n">uri</span><span class="p">)</span>
</span><span class='line'>    <span class="s2">&quot;/v1/</span><span class="si">#{</span><span class="n">uri</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">uri</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">get</span><span class="p">(</span>
</span><span class='line'>      <span class="n">endpoint</span><span class="p">(</span><span class="n">uri</span><span class="p">),</span>
</span><span class='line'>      <span class="n">default_options</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s why I like this code:</p>

<ol>
<li>Simple, easy to read code that mimics the API quite nicely.</li>
<li>Intuitive. Sending a POST request, is as simple as calling <code>post</code>.  No need to remember multiple things. Specifying headers, is literally passing an argument called <code>headers</code>.</li>
<li>Interacting with the API is now simple:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">service</span> <span class="o">=</span> <span class="no">ArticlesService</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">pp</span> <span class="n">service</span><span class="o">.</span><span class="n">index</span>
</span><span class='line'><span class="c1"># []</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Create an article</span>
</span><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>  <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Star Trek: A new hope&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">body</span><span class="p">:</span> <span class="s2">&quot;A play about how Frodo is</span>
</span><span class='line'><span class="s2">         tricked into attending the</span>
</span><span class='line'><span class="s2">         tri-wizard tournament by</span>
</span><span class='line'><span class="s2">         evil shogun Gandalf&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Made a mistake in the title, update it</span>
</span><span class='line'><span class="n">service</span><span class="o">.</span><span class="n">update</span><span class="p">(</span>
</span><span class='line'>  <span class="n">response</span><span class="o">[</span><span class="s1">&#39;article&#39;</span><span class="o">][</span><span class="s1">&#39;id&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Star Wars: Into the darkness&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Delete that abomination of an article</span>
</span><span class='line'><span class="n">service</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">response</span><span class="o">[</span><span class="s1">&#39;article&#39;</span><span class="o">][</span><span class="s1">&#39;id&#39;</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where&rsquo;s the fun without ever changing requirements?</p>

<p>API, now V2, demands that we use digest auth, instead of basic auth.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">default_options</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="ss">headers</span><span class="p">:</span> <span class="n">headers</span><span class="p">,</span>
</span><span class='line'>    <span class="n">digest_auth</span><span class="p">:</span> <span class="n">auth</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">endpoint</span><span class="p">(</span><span class="n">uri</span><span class="p">)</span>
</span><span class='line'>  <span class="s2">&quot;/v2/</span><span class="si">#{</span><span class="n">uri</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>That was a simple change. Let&rsquo;s try adding custom headers.  The API now supports logging, tracking and tagging requests. All done through headers. Since this is context specific, we&rsquo;ll pass in the context as an argument to the constructor:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@auth</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">username</span><span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;API_USERNAME&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">password</span><span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;API_PASSWORD&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@headers</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;Content-Type&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;application/json&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;X-User-ID&quot;</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">tracking_id</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;X-Tags&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Name:</span><span class="si">#{</span><span class="n">user</span><span class="o">.</span><span class="n">full_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In addition to basic auth,  we can also send in an oauth style &ldquo;Bearer&rdquo; token:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@headers</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;Content-Type&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;application/json&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;X-User-ID&quot;</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">tracking_id</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;X-Tags&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Name:</span><span class="si">#{</span><span class="n">user</span><span class="o">.</span><span class="n">full_name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Authorisation&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Bearer:</span><span class="si">#{</span><span class="n">user</span><span class="o">.</span><span class="n">oauth_token</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Okay, this last example was lame.  But the point remains, HTTParty allows you to build your own service objects, and gets out of your way.  Exactly what a library should do.</p>

<p>If you really take a close look at our examples, consuming an HTTP API is all about:</p>

<ul>
<li>Setting Headers</li>
<li>Specifying Query parameters</li>
<li>Request body encoding</li>
<li>Parsing response based on content type</li>
<li>Making the HTTP requests</li>
</ul>


<p>Not surprising, right?  HTTParty makes it simple, and intuitive to perform all these actions.  And hence it remains my favourite.</p>

<p>P.S.  Here&rsquo;s the code used above, <a href="https://gist.github.com/swanandp/51d24ca474b10b10c68f2afeb30dc65e">in a Gist</a>.</p>

<!-- Links -->



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Postgres Text Search: Simple, Adequate]]></title>
    <link href="http://swanandp.github.io/blog/2017/06/18/postgres-text-search-simple-adequate/"/>
    <updated>2017-06-18T00:00:00+05:30</updated>
    <id>http://swanandp.github.io/blog/2017/06/18/postgres-text-search-simple-adequate</id>
    <content type="html"><![CDATA[<p>Searching for text within your data is a frequently requested feature, and often leads to excellent UX.  Gmail&rsquo;s web interface is entirely built on top of search. No wonder databases have supported basic text search operators like ~, LIKE, ILIKE etc for a long time.  But they often fall short or give inaccurate results, as we try to evolve the feature.  Say, searching in multiple languages, or searching for different variants of the same word: consider realistically, realistic, and realist, or <a href="https://www.google.co.in/#q=ruby+-jewel">searching one word, but not the other</a>.</p>

<p>This is where full-text search comes in.  <!-- more --> Postgres ships with excellent full-text search capabilities which allow us to implement text search in our application without incurring additional dependencies and operational overhead.  More over, having a built-in search allows us to compose search with other existing queries and procedures.  When I say excellent capabilities, I mean fully-featured.  And when I say fully-featured, I mean that it supports stemming, search relevance, search highlights, fuzzy matching, and multiple languages.</p>

<p>In this post, we&rsquo;ll look at basic text search.  In particular, we&rsquo;ll look at the fundamental components of a text search, and how to use them.</p>

<p><strong>Document</strong></p>

<p>This is the source data within which we intend to search. Typically spread across multiple columns. Now, I know any search worth its salt must be able to search across multiple rows in multiple tables, but we&rsquo;ll come to that bit a little later in the post.  Postgres offers a function <code>to_tsvector</code> to obtain a search document from text.  It accepts text as an argument, and returns tsvector of the text.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- Example 1a: tsvector</span>
</span><span class='line'><span class="o">=#</span> <span class="k">SELECT</span>
</span><span class='line'>   <span class="n">to_tsvector</span><span class="p">(</span><span class="s1">&#39;With great power, comes great responsibility!&#39;</span><span class="p">)</span>
</span><span class='line'>   <span class="k">AS</span> <span class="n">document</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">document</span>
</span><span class='line'><span class="c1">--------------------------------------------</span>
</span><span class='line'> <span class="s1">&#39;come&#39;</span><span class="p">:</span><span class="mi">4</span> <span class="s1">&#39;great&#39;</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span> <span class="s1">&#39;power&#39;</span><span class="p">:</span><span class="mi">3</span> <span class="s1">&#39;respons&#39;</span><span class="p">:</span><span class="mi">6</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span> <span class="k">row</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Example 1b: have strings, will concat</span>
</span><span class='line'><span class="o">=#</span> <span class="k">SELECT</span>
</span><span class='line'>   <span class="n">to_tsvector</span><span class="p">(</span><span class="s1">&#39;With great power&#39;</span> <span class="o">||</span> <span class="s1">&#39; &#39;</span> <span class="o">||</span> <span class="s1">&#39;comes great responsibility!&#39;</span><span class="p">)</span>
</span><span class='line'>   <span class="k">AS</span> <span class="n">document</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                  <span class="n">document</span>
</span><span class='line'><span class="c1">--------------------------------------------</span>
</span><span class='line'> <span class="s1">&#39;come&#39;</span><span class="p">:</span><span class="mi">4</span> <span class="s1">&#39;great&#39;</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span> <span class="s1">&#39;power&#39;</span><span class="p">:</span><span class="mi">3</span> <span class="s1">&#39;respons&#39;</span><span class="p">:</span><span class="mi">6</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span> <span class="k">row</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Example 1c: have tsvectors, will concat</span>
</span><span class='line'><span class="o">=#</span> <span class="k">SELECT</span>
</span><span class='line'>   <span class="n">to_tsvector</span><span class="p">(</span><span class="s1">&#39;With great power&#39;</span><span class="p">)</span>
</span><span class='line'>   <span class="o">||</span> <span class="n">to_tsvector</span><span class="p">(</span><span class="s1">&#39;comes great responsibility!&#39;</span><span class="p">)</span>
</span><span class='line'>   <span class="k">AS</span> <span class="n">document</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                  <span class="n">document</span>
</span><span class='line'><span class="c1">--------------------------------------------</span>
</span><span class='line'> <span class="s1">&#39;come&#39;</span><span class="p">:</span><span class="mi">4</span> <span class="s1">&#39;great&#39;</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span> <span class="s1">&#39;power&#39;</span><span class="p">:</span><span class="mi">3</span> <span class="s1">&#39;respons&#39;</span><span class="p">:</span><span class="mi">6</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span> <span class="k">row</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few things are noticeable:</p>

<ol>
<li>Punctuation is gone, so is &lsquo;with&rsquo;.  All commonly occurring words that don&rsquo;t have search relevance, such as &lsquo;with&rsquo;, are removed from the documents.  These differ from language to language, and are called &ldquo;stop words&rdquo;.</li>
<li>Words are reduced to a base form. These are called as &ldquo;<a href="https://www.postgresql.org/docs/current/static/textsearch-intro.html">lexemes</a>&rdquo;; they are nothing but normalised forms of words, a term taken from <a href="https://en.wikipedia.org/wiki/Lexeme">linguistics</a>.</li>
<li>The lexemes are sorted alphabetically, There are numbers associated with the lexemes.</li>
<li>The tsvectors can be concatenated, <em>or</em> can operate on concatenated strings</li>
</ol>


<p>If you want to dig deeper into how the search actually works, these are some of the things you can read about.  For now, we&rsquo;ll focus on just one thing from this:  the to_tsvector accepted our text input, and returned a searchable value.</p>

<p>As a side note, I really like this examples driven approach to learning.  Code and examples make for easier understanding of the subject, and give the reader a starting point to dig deeper.  In that spirit, this blog post is a repl-driven-blog-post.</p>

<p><strong>Query</strong></p>

<p>The term we wish to search for.  Typically a word or a phrase , but can be any text. Even a full document if you will. For obtaining a query object from the given search string, Postgres has two functions: <code>to_tsquery</code> and <code>plainto_tsquery</code>. <code>to_tsquery</code> allows us to use control characters like wildcards, but is a lot stricter with the input. <code>plainto_tsquery</code> on the other hand doesn&rsquo;t use control characters, but escapes all the input, and is safe from SQL injection.  In this post we&rsquo;ll only look at to_tsquery since it falls in line with our &ldquo;fully featured&rdquo; requirement.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- Example 2: tsquery</span>
</span><span class='line'><span class="o">=#</span> <span class="k">SELECT</span> <span class="n">to_tsquery</span><span class="p">(</span><span class="s1">&#39;responsibility&#39;</span><span class="p">);</span>
</span><span class='line'> <span class="n">to_tsquery</span>
</span><span class='line'><span class="c1">------------</span>
</span><span class='line'> <span class="s1">&#39;respons&#39;</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span> <span class="k">row</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Example 3: tsquery multiple words, with escaping</span>
</span><span class='line'><span class="o">=#</span> <span class="k">SELECT</span> <span class="n">to_tsquery</span><span class="p">(</span><span class="s1">&#39;great\ responsibility&#39;</span><span class="p">);</span>
</span><span class='line'>     <span class="n">to_tsquery</span>
</span><span class='line'><span class="c1">---------------------</span>
</span><span class='line'> <span class="s1">&#39;great&#39;</span> <span class="o">&amp;</span> <span class="s1">&#39;respons&#39;</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span> <span class="k">row</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Example 4: Wildcard search</span>
</span><span class='line'><span class="o">=#</span> <span class="k">SELECT</span> <span class="n">to_tsquery</span><span class="p">(</span><span class="s1">&#39;Eliz:*&#39;</span><span class="p">);</span>
</span><span class='line'> <span class="n">to_tsquery</span>
</span><span class='line'><span class="c1">------------</span>
</span><span class='line'> <span class="s1">&#39;eliz&#39;</span><span class="p">:</span><span class="o">*</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span> <span class="k">row</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Example 5: Intersection (AND-ing)</span>
</span><span class='line'><span class="o">=#</span> <span class="k">SELECT</span> <span class="n">to_tsquery</span><span class="p">(</span><span class="s1">&#39;Barry&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">to_tsquery</span><span class="p">(</span><span class="s1">&#39;Allen&#39;</span><span class="p">);</span>
</span><span class='line'>     <span class="o">?</span><span class="k">column</span><span class="o">?</span>
</span><span class='line'><span class="c1">-------------------</span>
</span><span class='line'> <span class="s1">&#39;barri&#39;</span> <span class="o">&amp;</span> <span class="s1">&#39;allen&#39;</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span> <span class="k">row</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Example 5: Union (OR-ing)</span>
</span><span class='line'><span class="o">=#</span> <span class="k">SELECT</span> <span class="n">to_tsquery</span><span class="p">(</span><span class="s1">&#39;Barry&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="n">to_tsquery</span><span class="p">(</span><span class="s1">&#39;Wally&#39;</span><span class="p">);</span>
</span><span class='line'>     <span class="o">?</span><span class="k">column</span><span class="o">?</span>
</span><span class='line'><span class="c1">-------------------</span>
</span><span class='line'> <span class="s1">&#39;barri&#39;</span> <span class="o">|</span> <span class="s1">&#39;walli&#39;</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span> <span class="k">row</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Examples demonstrate the various usages of to_tsquery.  Wildcards, AND and OR do exactly what you&rsquo;d expect them to do.  The key takeaway is that, these are just regular functions, like <code>LOWER</code>, <code>LENGTH</code> and so we can just use them in <em>any</em> query.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- Example 6</span>
</span><span class='line'><span class="o">=#</span> <span class="k">SELECT</span>
</span><span class='line'>   <span class="n">name</span><span class="p">,</span>
</span><span class='line'>   <span class="n">to_tsvector</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="k">AS</span> <span class="n">document</span>
</span><span class='line'>   <span class="k">FROM</span> <span class="n">states</span>
</span><span class='line'>   <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">name</span> <span class="k">ASC</span>
</span><span class='line'>   <span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="n">name</span>         <span class="o">|</span>         <span class="n">document</span>
</span><span class='line'><span class="c1">----------------------+---------------------------</span>
</span><span class='line'> <span class="n">Alabama</span>              <span class="o">|</span> <span class="s1">&#39;alabama&#39;</span><span class="p">:</span><span class="mi">1</span>
</span><span class='line'> <span class="n">Alaska</span>               <span class="o">|</span> <span class="s1">&#39;alaska&#39;</span><span class="p">:</span><span class="mi">1</span>
</span><span class='line'> <span class="n">Arizona</span>              <span class="o">|</span> <span class="s1">&#39;arizona&#39;</span><span class="p">:</span><span class="mi">1</span>
</span><span class='line'> <span class="n">Arkansas</span>             <span class="o">|</span> <span class="s1">&#39;arkansa&#39;</span><span class="p">:</span><span class="mi">1</span>
</span><span class='line'> <span class="n">California</span>           <span class="o">|</span> <span class="s1">&#39;california&#39;</span><span class="p">:</span><span class="mi">1</span>
</span><span class='line'> <span class="n">Colorado</span>             <span class="o">|</span> <span class="s1">&#39;colorado&#39;</span><span class="p">:</span><span class="mi">1</span>
</span><span class='line'> <span class="n">Connecticut</span>          <span class="o">|</span> <span class="s1">&#39;connecticut&#39;</span><span class="p">:</span><span class="mi">1</span>
</span><span class='line'> <span class="n">Delaware</span>             <span class="o">|</span> <span class="s1">&#39;delawar&#39;</span><span class="p">:</span><span class="mi">1</span>
</span><span class='line'> <span class="n">District</span> <span class="k">of</span> <span class="n">Columbia</span> <span class="o">|</span> <span class="s1">&#39;columbia&#39;</span><span class="p">:</span><span class="mi">3</span> <span class="s1">&#39;district&#39;</span><span class="p">:</span><span class="mi">1</span>
</span><span class='line'> <span class="n">Florida</span>              <span class="o">|</span> <span class="s1">&#39;florida&#39;</span><span class="p">:</span><span class="mi">1</span>
</span><span class='line'><span class="p">(</span><span class="mi">10</span> <span class="k">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Putting document and query together</strong></p>

<p>Now the question arises: How to actually use tsvector and tsquery?  Enter the <code>@@</code> operator.  This is the operator that actually performs the search. Examples work the best, so let&rsquo;s search for a US State with the word &ldquo;North&rdquo; in it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">=#</span> <span class="k">SELECT</span>
</span><span class='line'>     <span class="n">name</span><span class="p">,</span>
</span><span class='line'>     <span class="n">to_tsvector</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="k">AS</span> <span class="n">document</span>
</span><span class='line'>   <span class="k">FROM</span> <span class="n">states</span>
</span><span class='line'>   <span class="k">WHERE</span> <span class="n">to_tsvector</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="o">@@</span> <span class="n">to_tsquery</span><span class="p">(</span><span class="s1">&#39;north&#39;</span><span class="p">)</span>
</span><span class='line'>   <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">name</span> <span class="k">ASC</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">name</span>      <span class="o">|</span>        <span class="n">document</span>
</span><span class='line'><span class="c1">----------------+------------------------</span>
</span><span class='line'> <span class="n">North</span> <span class="n">Carolina</span> <span class="o">|</span> <span class="s1">&#39;carolina&#39;</span><span class="p">:</span><span class="mi">2</span> <span class="s1">&#39;north&#39;</span><span class="p">:</span><span class="mi">1</span>
</span><span class='line'> <span class="n">North</span> <span class="n">Dakota</span>   <span class="o">|</span> <span class="s1">&#39;dakota&#39;</span><span class="p">:</span><span class="mi">2</span> <span class="s1">&#39;north&#39;</span><span class="p">:</span><span class="mi">1</span>
</span><span class='line'><span class="p">(</span><span class="mi">2</span> <span class="k">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<br/>


<p>Or, let&rsquo;s search for a state that has a word that starts with &ldquo;CA&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">=#</span> <span class="k">SELECT</span>
</span><span class='line'>     <span class="n">name</span><span class="p">,</span>
</span><span class='line'>     <span class="n">to_tsvector</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="k">AS</span> <span class="n">document</span>
</span><span class='line'>   <span class="k">FROM</span> <span class="n">states</span>
</span><span class='line'>   <span class="k">WHERE</span> <span class="n">to_tsvector</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="o">@@</span> <span class="n">to_tsquery</span><span class="p">(</span><span class="s1">&#39;ca:*&#39;</span><span class="p">)</span>
</span><span class='line'>   <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">name</span> <span class="k">ASC</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">name</span>      <span class="o">|</span>        <span class="n">document</span>
</span><span class='line'><span class="c1">----------------+------------------------</span>
</span><span class='line'> <span class="n">California</span>     <span class="o">|</span> <span class="s1">&#39;california&#39;</span><span class="p">:</span><span class="mi">1</span>
</span><span class='line'> <span class="n">North</span> <span class="n">Carolina</span> <span class="o">|</span> <span class="s1">&#39;carolina&#39;</span><span class="p">:</span><span class="mi">2</span> <span class="s1">&#39;north&#39;</span><span class="p">:</span><span class="mi">1</span>
</span><span class='line'> <span class="n">South</span> <span class="n">Carolina</span> <span class="o">|</span> <span class="s1">&#39;carolina&#39;</span><span class="p">:</span><span class="mi">2</span> <span class="s1">&#39;south&#39;</span><span class="p">:</span><span class="mi">1</span>
</span><span class='line'><span class="p">(</span><span class="mi">3</span> <span class="k">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that is your standard text search spanning multiple rows of a table.  A friendly, neighbourhood text-search is just a WHERE clause away! Another clear takeaway here is that any <code>@@</code> operation is no different from your average <code>=</code> operation.  Naturally, a multi-table search is just a join away. Multi-column searches are just a concatenation away.</p>

<p>However, what I like about this idea is that I can now compose this search with my existing SQL queries.  Let&rsquo;s say I have a query for &ldquo;all contacts of a user that have a facebook profile&rdquo;, and now I can &ldquo;name search&rdquo; in just this subset.  To me, this is the best use-case of having the search built-in.  Composability is a very powerful design pattern.</p>

<p>A note on <code>NULL</code>s:  As with everything in Postgres, text-search doesn&rsquo;t quite work well with NULLs.  If you have null columns, <a href="https://www.postgresql.org/docs/9.6/static/functions-conditional.html">COALESCE</a> is your friend, use it liberally!</p>

<p><strong>Search relevance and rankings</strong></p>

<p>Searches are often centered around finding &ldquo;all matching documents&rdquo;, rather than finding a specific document.  In its most basic form, search relevance boils down to two questions:</p>

<ol>
<li>How do I rank the results returned by the search?</li>
<li>How do I control the ranking based on my context and requirements?</li>
</ol>


<p>Answer to the first question is the <code>ts_rank</code> function.  It accepts a tsvector and a tsquery as an argument, and returns the &ldquo;rank&rdquo;; which is a bit of a misnomer, because unlike a regular rank, where 1 is better than 2 is better than 3, this rank has the property &ldquo;higher the better&rdquo;.  It&rsquo;s best used in the ORDER clause.  Here&rsquo;s an example, searching all people whose name starts with &ldquo;Eliz&rdquo;. If that sounds odd, think autocomplete :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">=#</span> <span class="k">SELECT</span>
</span><span class='line'>     <span class="n">first_name</span><span class="p">,</span>
</span><span class='line'>     <span class="n">ts_rank</span><span class="p">(</span><span class="n">to_tsvector</span><span class="p">(</span><span class="n">first_name</span><span class="p">),</span> <span class="n">to_tsquery</span><span class="p">(</span><span class="s1">&#39;eliz:*&#39;</span><span class="p">))</span> <span class="k">as</span> <span class="n">rank</span>
</span><span class='line'>   <span class="k">FROM</span> <span class="n">person_names</span>
</span><span class='line'>   <span class="k">WHERE</span> <span class="n">to_tsvector</span><span class="p">(</span><span class="n">first_name</span><span class="p">)</span> <span class="o">@@</span> <span class="n">to_tsquery</span><span class="p">(</span><span class="s1">&#39;eliz:*&#39;</span><span class="p">)</span>
</span><span class='line'>   <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">rank</span> <span class="k">DESC</span>
</span><span class='line'>   <span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">first_name</span>    <span class="o">|</span>   <span class="n">rank</span>
</span><span class='line'><span class="c1">-----------------+-----------</span>
</span><span class='line'> <span class="n">Elizabeth</span> <span class="n">Eliza</span> <span class="o">|</span> <span class="mi">0</span><span class="p">.</span><span class="mi">1215850</span>
</span><span class='line'> <span class="n">Elizabeth</span>       <span class="o">|</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0607927</span>
</span><span class='line'> <span class="n">Elizabeth</span>       <span class="o">|</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0607927</span>
</span><span class='line'> <span class="n">Elizabeth</span>       <span class="o">|</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0607927</span>
</span><span class='line'> <span class="n">Elizabeth</span>       <span class="o">|</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0607927</span>
</span><span class='line'> <span class="n">Elizabeth</span>       <span class="o">|</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0607927</span>
</span><span class='line'> <span class="n">Elizabeth</span>       <span class="o">|</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0607927</span>
</span><span class='line'> <span class="n">Elizabeth</span>       <span class="o">|</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0607927</span>
</span><span class='line'> <span class="n">ELIZABETH</span>       <span class="o">|</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0607927</span>
</span><span class='line'> <span class="n">Elizabeth</span>       <span class="o">|</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0607927</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think you will find that absolute rank isn&rsquo;t as useful as being able to order results by it.  That brings us to the next question, how can the ts_rank function be configured?  Say, you are searching blog posts, and want a match in title to carry more weight than a match in the body.  For this, Postgres offers &ldquo;weights&rdquo;.  The weights are called as A, B, C and D, in the order of precedence.  The default value for these weights are 1.0, 0.4, 0.2, 0.1.  Which means a match with A carries 10 times more weight than a match with D.</p>

<p>Think of these weights as &ldquo;tags&rdquo;, i.e. you tag a tsvector as A or B or C or D, and specify which tags carry how much weight. With that, Postgres will yield appropriate rank.  The tags analogy will make more sense once we look at how tsquery uses these weights.  Here&rsquo;s a query to demonstrate using weights in tsvector:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">=#</span> <span class="k">SELECT</span> <span class="n">ts_rank</span><span class="p">(</span>
</span><span class='line'>           <span class="n">setweight</span><span class="p">(</span><span class="n">to_tsvector</span><span class="p">(</span><span class="s1">&#39;With great power&#39;</span><span class="p">),</span> <span class="s1">&#39;A&#39;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>           <span class="n">setweight</span><span class="p">(</span><span class="n">to_tsvector</span><span class="p">(</span><span class="s1">&#39;comes great responsibility!&#39;</span><span class="p">),</span> <span class="s1">&#39;D&#39;</span><span class="p">),</span>
</span><span class='line'>           <span class="n">to_tsquery</span><span class="p">(</span><span class="s1">&#39;power&#39;</span><span class="p">))</span>
</span><span class='line'>  <span class="k">AS</span> <span class="n">rank</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">rank</span>
</span><span class='line'><span class="c1">----------</span>
</span><span class='line'> <span class="mi">0</span><span class="p">.</span><span class="mi">607927</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span> <span class="k">row</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">=#</span> <span class="k">SELECT</span> <span class="n">ts_rank</span><span class="p">(</span>
</span><span class='line'>           <span class="n">setweight</span><span class="p">(</span><span class="n">to_tsvector</span><span class="p">(</span><span class="s1">&#39;With great power&#39;</span><span class="p">),</span> <span class="s1">&#39;A&#39;</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>           <span class="n">setweight</span><span class="p">(</span><span class="n">to_tsvector</span><span class="p">(</span><span class="s1">&#39;comes great responsibility!&#39;</span><span class="p">),</span> <span class="s1">&#39;D&#39;</span><span class="p">),</span>
</span><span class='line'>           <span class="n">to_tsquery</span><span class="p">(</span><span class="s1">&#39;responsibility&#39;</span><span class="p">))</span>
</span><span class='line'>   <span class="k">AS</span> <span class="n">rank</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">rank</span>
</span><span class='line'><span class="c1">----------</span>
</span><span class='line'> <span class="mi">0</span><span class="p">.</span><span class="mi">0607927</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span> <span class="k">row</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our document here is made up of two parts, &ldquo;with great power&rdquo;, tagged A, and &ldquo;comes great responsibility&rdquo;, tagged D.</p>

<p>The rank for &ldquo;power&rdquo; is 10 times higher than &ldquo;responsibility&rdquo; when searching this document, because &ldquo;power&rdquo; is in group A, while responsibility is in group D.  Without the weights, or with same weights to all components, they will have the same rank.</p>

<p>The default assignment of weights A = 1, B = 0.4, C = 0.2 and D = 0.1 can be changed.  Refer to the documentation for variations of <code>ts_rank</code> that accept weights as an argument.  Playing around with the values in the psql console would give you an idea what works best for you.  I&rsquo;ve often found that the default values really do work the best.</p>

<p>Coming back to the tags analogy, these same weights can also be assigned to a tsquery object, and the query would then match only amongst the given weight groups. Quite like a &ldquo;filter&rdquo;.  This allows for features like &ldquo;match this, but not that&rdquo;.  Have a look:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">=#</span> <span class="k">SELECT</span> <span class="n">setweight</span><span class="p">(</span><span class="n">to_tsvector</span><span class="p">(</span><span class="s1">&#39;With great power&#39;</span><span class="p">),</span> <span class="s1">&#39;A&#39;</span><span class="p">)</span>
</span><span class='line'>     <span class="o">||</span> <span class="n">setweight</span><span class="p">(</span><span class="n">to_tsvector</span><span class="p">(</span><span class="s1">&#39;comes great responsibility!&#39;</span><span class="p">),</span> <span class="s1">&#39;A&#39;</span><span class="p">)</span>
</span><span class='line'>     <span class="o">@@</span>
</span><span class='line'>     <span class="n">to_tsquery</span><span class="p">(</span><span class="s1">&#39;resp:*B&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">AS</span> <span class="n">is_match</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="n">is_match</span>
</span><span class='line'><span class="c1">----------</span>
</span><span class='line'> <span class="n">f</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span> <span class="k">row</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">=#</span> <span class="k">SELECT</span> <span class="n">setweight</span><span class="p">(</span><span class="n">to_tsvector</span><span class="p">(</span><span class="s1">&#39;With great power&#39;</span><span class="p">),</span> <span class="s1">&#39;A&#39;</span><span class="p">)</span>
</span><span class='line'>     <span class="o">||</span> <span class="n">setweight</span><span class="p">(</span><span class="n">to_tsvector</span><span class="p">(</span><span class="s1">&#39;comes great responsibility!&#39;</span><span class="p">),</span> <span class="s1">&#39;A&#39;</span><span class="p">)</span>
</span><span class='line'>     <span class="o">@@</span>
</span><span class='line'>     <span class="n">to_tsquery</span><span class="p">(</span><span class="s1">&#39;resp:*A&#39;</span><span class="p">)</span>
</span><span class='line'>   <span class="k">AS</span> <span class="n">is_match</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="n">is_match</span>
</span><span class='line'><span class="c1">----------</span>
</span><span class='line'> <span class="n">t</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span> <span class="k">row</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="https://www.postgresql.org/docs/current/static/textsearch-controls.html">official documentation</a> about controlling text search is quite good, and detailed.  I highly recommend that you read at least this section of the documentation, if not all of it.</p>

<p>This concludes the post about basic full-text search in Postgres. Have fun searching!  Do let me know what curious cases you tried out with tsquery and tsvectors.</p>

<p>In a follow-up post, we&rsquo;ll look at improving search performance by indexing, fuzzy matching, text highlighting and supporting multiple languages.</p>

<!-- Links -->



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10 actions you must internalize in your Editor]]></title>
    <link href="http://swanandp.github.io/blog/2014/05/06/10-actions-you-must-internalize/"/>
    <updated>2014-05-06T10:45:07+05:30</updated>
    <id>http://swanandp.github.io/blog/2014/05/06/10-actions-you-must-internalize</id>
    <content type="html"><![CDATA[<p>We love our Emacs vs Vim vs &lt;others&gt; debates.  In one argument Emacs rocks, in another Vim wins the day and in some other, TextMate takes the cake.  However, more than we love our editors, we love being productive; after all that is all what this is about.  By now, we know that the joy of writing code is well augmented by a good editor. It acts like a great force multiplier.  We go to great lengths to curate the editor &amp; its configuration to what suits us.</p>

<p>What happens when you want to use a different editor? <!-- more --> Or the same editor with different dotfiles?  They say that opening an editor and finding someone else&rsquo;s dotfiles is like going to bed and finding someone else&rsquo;s partner there.  From the outset, looks like an extremely awkward and uncomfortable experience. But, great if you were looking to switch.  So how do you learn an editor in order to be effective enough; enough being the keyword here?  The short answer to this is &ldquo;do the grunt work and put in the time&rdquo;.  However, I think all is not lost and learning a few actions as the first thing can save you a lot of time.  I often keep a cheat sheet ready with these actions in order to build the required muscle memory.</p>

<p>Now, this list is of course not complete.  A lot of things could be added to it or removed from it.  However, this is my recipe for quickly learning an editor.  And I would love to hear yours.  One thing to keep in mind is that this is not an exhaustive list of features that our editors must have.  No.  This is a list that we as programmers can use to quickly pass the learning curve of an editor.</p>

<p>I say <em>10</em>, but, it could well be <em>16</em>.  The point is having a minimum viable list.</p>

<ol>
<li><strong>Navigation within the file, moving around.</strong>  This is the most fundamental and the very first thing you&rsquo;ll probably do.  If in Emacs you can&rsquo;t C-n C-p C-f or C-b your way around, you&rsquo;ll feel exasperated soon.  So first thing to learn would be move the caret forward and backward.  There are different flavours to moving around:

<ol>
<li>One character at a time</li>
<li>One word at a time</li>
<li>One line at a time</li>
<li>One paragraph at a time etc.</li>
</ol>
</li>
<li><p><strong>Select, cut, copy and paste.</strong>  This comes naturally from Point 1.  Once you are able to move around, you would want to move text around.  Selecting text is also extremely important.  You don&rsquo;t have to use your mouse to actually select.  Selection is actually demarcation, and it works a scope.  Select a bunch of text and then perform an action only on that text.  I&rsquo;ll elaborate on this further down the list. <small> &lt;rant&gt; This ability is overrated and often superseded by others actions in the list. &lt;/rant&gt; </small></p></li>
<li><p><strong>Duplicate, delete, move and displace lines and blocks.</strong>  When working with code, we often work with whole lines, rather than words or characters. Which is why this ability comes extremely handy.  It is best used while refactoring code or formatting code.  I cannot stress how important this is.  Duplicating lines and them moving them around is indispensable.  Once you&rsquo;ve learned to use this well, I&rsquo;ll bet you would be uncomfortable without it.</p></li>
<li><p><strong>Search and replace strings and regular expressions; scoped or not.</strong>  Search and replace, combined with text selection that acts as scope is an integral part of refactoring code.  When I think of S&amp;R, I think of renaming variables, functions, classes.  I think of upgrading from <code>:key =&gt; value</code> to <code>key: value</code>.  I think of upgrading from Bootstrap 2 to Bootstrap 3, where <code>span12</code> becomes <code>col-md-12</code>.  You get the point.  As a side note, if you are building an editor to learn something new, this can a fun feature to implement.  Go ahead and try if it suits you.</p></li>
<li><p><strong>Quickly generate boilerplate code.</strong>  Once you are past the steeper part of the learning curve of a language technology, boilerplate manifests as the killer of you productivity and brings death to it by boredom. Unless, you have tuned your editor to snuff it out quickly.  Type <code>def&lt;tab&gt;</code> and boom, you have a method definition placeholder. <code>cla&lt;tab&gt;</code> and you have class declaration, <code>for&lt;tab&gt;</code> you have your block ready. etc. etc.  More than the terse languages like Ruby, Python, this will be more handy in verbose languages like Java, Objective C.</p></li>
<li><p><strong>Quickly jump to recently used files. Jump to any file within the project in few keystrokes.</strong>  <code>Command+T</code> in TextMate <code>Control-P</code> in Vim etc.  When working on a project, the impact this feature can have is tremendous.  One of the best use cases is jumping to last file.  I often find that I typically work with 2 files at a time ( Model and the Controller or The presenter and the view, the header and the implementation, Model and its Tests etc. ).  So I need to be able switch to other file fast.  In Emacs, <code>C-x b &lt;enter&gt;</code>, in TextMate <code>Command-T &lt;enter&gt;</code>, in RubyMine <code>Command-e &lt;enter&gt;</code> do the job quite fantastically for me.  In fact, as a principle, I do not use editors where this isn&rsquo;t possible or isn&rsquo;t fast enough ( I am looking at you Eclipse and Netbeans ).  Most editors who do this well allow you to perform &ldquo;partial name search&rdquo; i.e. searching for bdct will return *broadcast* amongst others.  Folder scoping is also often allowed. i.e. searching for <code>a/v/a/bdht</code> can return <code>app/views/admin/_broadcast.html.erb</code>.</p></li>
<li><p><strong>See or edit different parts of the same file or vertical &amp; horizontal split views.</strong>  When jumping between the files is not enough, you need to be able to look at the files at the same time, or look at different parts of the same file.  E.g. while editing markdown, you&rsquo;ll want live preview on right.  Or while writing a public API for your class, you&rsquo;ll want to look at the private methods etc.  In another case, you&rsquo;ll want to open up a REPL on the side while you edit code and periodically send code to the REPL for evaluation.  Use cases are plenty and hence this is a part of this list.</p></li>
<li><p><strong>Dumb autocomplete.</strong>  Your editor and you should know how to quickly complete words in the same file, words typed before, keywords in the current language (programming or not).  <code>C-\</code> in Emacs, <code>Alt-/</code> in IntelliJ or <code>Escape</code> in TextMate are good examples of this.  Fancy, code aware completions are heavily IDE dependent and very hard to get right.  But dumb completions can be fast and very handy.</p></li>
<li><p><strong>Run a test or open a shell.</strong>  I love my <code>Ctrl+Shift+R</code> in RubyMine where it runs the test I am currently editing or the test file I am currently editing, depending on where my caret is.  Same goes for <code>Command+Shift+R</code> in TextMate. In Emacs <code>M-x shell</code> opens the terminal within Emacs and use it often, for running tasks, creating files, git commits, etc.</p></li>
<li><p><strong>Comment and uncomment code.</strong>  I contemplated whether this should be a part of this list and decided to keep it.  When working on existing code, commenting and uncommenting can be extremely valuable.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Console your gems: Add REPL to them]]></title>
    <link href="http://swanandp.github.io/blog/2014/04/28/console-repl-for-your-gems/"/>
    <updated>2014-04-28T12:27:34+05:30</updated>
    <id>http://swanandp.github.io/blog/2014/04/28/console-repl-for-your-gems</id>
    <content type="html"><![CDATA[<p>When you are working on a Ruby gem or a Ruby library ( why you would have a Ruby library that isn&rsquo;t a gem is beyond me ), it is <s>always</s> often desirable to have a Pry session loaded with the gem your working on.  In fact, I&rsquo;ll go out on a limb and say that REPL driven development is a a must-do when writing libraries.  REPLs are like ice added to your beer when it isn&rsquo;t cold anymore, except this ice is made from the same beer.</p>

<!-- more -->


<p>A lot of gems ship with this functionality, but if not, it is extremely easy to add one.  To avoid polluting every gem with our code, we can utilize the concept of Rake&rsquo;s global tasks.  Rake&rsquo;s default source for looking at tasks or <span title="Google it">rules</span> is the Rakefile and all files that are declared as source files in the Rakefile; typically <code>*.rake</code> files in your tasks folder, but this can vary depending on your project.  However, rake also looks at <code>~/.rake/*.rake</code> if we ask it to. So let&rsquo;s create a file called <code>~/.rake/console.rake</code> and add the following task to it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;Open a pry (or irb) session preloaded with this gem&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:console</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="nb">require</span> <span class="s1">&#39;pry&#39;</span>
</span><span class='line'>    <span class="n">gem_name</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sh</span> <span class="sx">%{pry -I lib -r </span><span class="si">#{</span><span class="n">gem_name</span><span class="si">}</span><span class="sx">.rb}</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="no">LoadError</span> <span class="o">=&gt;</span> <span class="n">_</span>
</span><span class='line'>    <span class="n">sh</span> <span class="sx">%{irb -rubygems -I lib -r </span><span class="si">#{</span><span class="n">gem_name</span><span class="si">}</span><span class="sx">.rb}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And run our shiny new rake task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">➜</span>  <span class="n">awesome_sauce</span> <span class="ss">git</span><span class="p">:(</span><span class="n">master</span><span class="p">)</span> <span class="err">✗</span> <span class="n">rake</span> <span class="n">console</span>
</span><span class='line'><span class="n">rake</span> <span class="n">aborted!</span>
</span><span class='line'><span class="no">Don</span><span class="s1">&#39;t know how to build task &#39;</span><span class="n">console</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="no">See</span> <span class="n">full</span> <span class="n">trace</span> <span class="n">by</span> <span class="n">running</span> <span class="n">task</span> <span class="n">with</span> <span class="o">--</span><span class="n">trace</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bummer! Let&rsquo;s double check:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">➜</span>  <span class="n">awesome_sauce</span> <span class="ss">git</span><span class="p">:(</span><span class="n">master</span><span class="p">)</span> <span class="err">✗</span> <span class="n">rake</span> <span class="o">-</span><span class="n">T</span> <span class="n">console</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing! What gives?  Not a cause of worry, because this is the expected behaviour, and we have a failing test. Rake takes global pollution quite seriously, and <em>does not</em> load the global tasks unless asked to.  So let&rsquo;s ask rake to do so, by adding a <code>-g</code> flag.  Because, you know, g for global:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">➜</span>  <span class="n">awesome_sauce</span> <span class="ss">git</span><span class="p">:(</span><span class="n">master</span><span class="p">)</span> <span class="err">✗</span> <span class="n">rake</span> <span class="o">-</span><span class="n">gT</span> <span class="n">console</span>
</span><span class='line'><span class="n">rake</span> <span class="n">console</span>  <span class="c1"># Open a pry (or irb) session preloaded with this gem</span>
</span></code></pre></td></tr></table></div></figure>


<p>And subsequently</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">➜</span>  <span class="n">awesome_sauce</span> <span class="ss">git</span><span class="p">:(</span><span class="n">master</span><span class="p">)</span> <span class="err">✗</span> <span class="n">rake</span> <span class="o">-</span><span class="n">g</span> <span class="n">console</span>
</span><span class='line'><span class="n">pry</span> <span class="o">-</span><span class="n">I</span> <span class="n">lib</span> <span class="o">-</span><span class="n">r</span> <span class="n">awesome_sauce</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">1</span> <span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mi">0</span> <span class="o">&gt;</span>
</span><span class='line'><span class="c1"># Just to be sure</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">1</span> <span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mi">0</span> <span class="o">&gt;</span> <span class="o">^</span><span class="n">D</span>
</span><span class='line'><span class="err">➜</span>  <span class="n">awesome_sauce</span> <span class="ss">git</span><span class="p">:(</span><span class="n">master</span><span class="p">)</span> <span class="err">✗</span> <span class="n">cd</span> <span class="o">.</span><span class="n">.</span><span class="o">/</span><span class="n">secret_sauce</span>
</span><span class='line'><span class="err">➜</span>  <span class="n">secret_sauce</span> <span class="ss">git</span><span class="p">:(</span><span class="n">hush</span><span class="o">-</span><span class="n">hush</span><span class="p">)</span> <span class="err">✗</span> <span class="n">rake</span> <span class="o">-</span><span class="n">g</span> <span class="n">console</span>
</span><span class='line'><span class="n">rbx</span><span class="o">-</span><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">1</span> <span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mi">0</span> <span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this, I bow out and promise to come back with more palatable content later.</p>

<p><strong>Edit</strong>: As <a href="https://twitter.com/emilsoman">Emil</a> pointed out, <code>pry</code> uses the same trick in <code>pry --gem</code><a href="https://github.com/pry/pry/blob/01360a684443f9e516578566afe6f41d92f63419/lib/pry/cli.rb#L209"><sup>#</sup></a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I am speaking at RubyConf India]]></title>
    <link href="http://swanandp.github.io/blog/2014/02/09/i-am-speaking-at-rubyconf-india/"/>
    <updated>2014-02-09T23:45:07+05:30</updated>
    <id>http://swanandp.github.io/blog/2014/02/09/i-am-speaking-at-rubyconf-india</id>
    <content type="html"><![CDATA[<p><a href="http://rubyconfindia.org/2014">India&rsquo;s premier Ruby conference</a> is happening at Goa this year, in the third week of March.  This year, my talk proposal got accepted and I am up on <a href="http://rubyconfindia2014.busyconf.com/schedule#activity_52cce8d8852da40010000095">day 1 at 2.30pm</a>.</p>

<!-- more -->


<p>I&rsquo;ve been digging into real time web applications for the last few months and SSE (Server Sent Events) and WebRTC caught my attention.  <a href="http://pusher.com/">Pusher</a>, a fantastic service that allows you easily implement a pub/sub model in your application, uses SSE as a transport.  And <a href="http://www.webrtc.org/">WebRTC</a> is a recent addition to the fore. Well, not so recent, as Google open sourced it in 2011.  A standard API is currently being drafted by the W3C.</p>

<p>These technologies allow two-way communication between server and client and you no longer have to depend on polling to update the clients.  There are arguments that this breaks the hypermedia agreement, and is harder to scale than traditional stateless Request/Response style of serving web resources.  I haven&rsquo;t yet formed an opinion on this, because I am clearly blinded by the awesomeness and ease of using these technologies.</p>

<p>In my talk I aim to introduce the concepts to the audience and then follow it up with code examples and best practises.  As most of the audience would be interested hear about Rails integration, I will cover all examples in the Rails context.  If you are going to be there, do read the Wikipedia page of the involved concepts and then come to the talk, I am certain you will gain a lot more this way.</p>

<p>Oh and I forgot to mention, RubyConfIndia offers this awesome badge:</p>

<p><a href="http://rubyconfindia.org/"><img src="https://raw.githubusercontent.com/rubyconfindia/rci2014/master/images/badges/180/speaker.png"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, world!]]></title>
    <link href="http://swanandp.github.io/blog/2014/01/08/hello/"/>
    <updated>2014-01-08T14:49:26+05:30</updated>
    <id>http://swanandp.github.io/blog/2014/01/08/hello</id>
    <content type="html"><![CDATA[<p>Wikipedia tells us:</p>

<blockquote><p>A &ldquo;Hello World&rdquo; program has become the traditional first program that many people learn. In general, it is simple enough so that people who have no experience with computer programming can easily understand it, especially with the guidance of a teacher or a written guide. Using this simple program as a basis, computer science principles or elements of a specific programming language can be explained to novice programmers. Experienced programmers learning new languages can also gain a lot of information about a given language&rsquo;s syntax and structure from a hello world program.</p></blockquote>
]]></content>
  </entry>
  
</feed>
