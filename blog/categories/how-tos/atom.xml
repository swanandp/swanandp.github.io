<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: how-tos | Swanand Pagnis]]></title>
  <link href="http://info.pagnis.in/blog/categories/how-tos/atom.xml" rel="self"/>
  <link href="http://info.pagnis.in/"/>
  <updated>2020-10-12T16:58:33+05:30</updated>
  <id>http://info.pagnis.in/</id>
  <author>
    <name><![CDATA[Swanand Pagnis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use The French Press, Luke!]]></title>
    <link href="http://info.pagnis.in/blog/2020/10/12/use-the-french-press-luke/"/>
    <updated>2020-10-12T15:47:19+05:30</updated>
    <id>http://info.pagnis.in/blog/2020/10/12/use-the-french-press-luke</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re getting started with brewing your own coffee, use the French Press.  We will see why in this post. And we will also see a recommended setup towards the end.</p>

<p>So you decided to make your own coffee. Wonderful! 🤗 I am willing to bet that the decision to start brewing your own coffee came after consuming <em>content</em> related to coffee. Maybe you&rsquo;ve been watching James Hoffmann&rsquo;s videos. Perhaps you&rsquo;ve been looking at Blue Bottle&rsquo;s exceedingly rare collections. Or maybe you have friends who tweet about coffee, sharing their pictures, setups, recipes. But you&rsquo;re in. By the grace of the mighty civet&rsquo;s tail, you&rsquo;re sold.</p>

<p><img src="http://info.pagnis.in/assets/distracted-bf-coffee.jpg" alt="Distracted boyfriend meme: distracted by reading about coffee when he should be making coffee" width="75%" /></p>

<p>So what next?</p>

<!-- more -->


<p>AeroPress™? French Press? Pour-overs? Moka pots? Espresso? Wouldn&rsquo;t you love to make some latte art? Which coffee to buy? Intelligentsia? Blue Bottle? Blue Tokai? Kaapi Kotai? So many options, and <strong>all good</strong> ones. The age of third-wave coffee is kind. We have great choices all around.</p>

<p>But it pays rich dividends to set your goal on <em>learning better</em> as you make your daily cup. Nobody makes a perfect cup on their first few attempts. Sure, you can make a good one, but don&rsquo;t fool yourself. Consistency is the key. It takes umpteen iterations to settle on to a taste and brewing level you like and is actually good.</p>

<blockquote><p>Never buy a Steinway Concert Grand if you&rsquo;re just beginning to learn how to play the piano. Buy a Yamaha semi-weighted digital piano instead. You will know when to buy the Steinway.</p></blockquote>

<p><strong>Start with a French Press.</strong></p>

<h2>Why, though?</h2>

<h3>French Press is simple</h3>

<p>Unlike its cousins AeroPress™ or Pour-over, which have specific techniques, the Press pot is simple. Grind coffee, mix a proportionate amount of hot water, start the timer, pour when it rings. The tiny details and intricacies can come later. They <em>will</em> come later. The important thing is that this simple recipe <strong>reduces your barrier</strong> to brewing. You need to start brewing and tasting.</p>

<h3>French Press allows a wide range of experiments</h3>

<p>There are <em>many</em> factors that go into the taste and extraction of the coffee. Not all are equally important. Some are foundational, some are marginal, some others are downright refined. Using a good baseline and then playing with these factors will quickly help you find your way.</p>

<p>All brewing methods allow experimenting, some more than others. With Espresso, there&rsquo;s little room for grind size and water temperature. With Pour-Over, there&rsquo;s a small room for the coffee-water ratio. With AeroPress™, there&rsquo;s a small room for air pressure. With the Press, you can experiment quite easily with the following:</p>

<ul>
<li>Coffee to water ratio</li>
<li>Grind size</li>
<li>Brew time</li>
<li>Water temperature</li>
</ul>


<p>It&rsquo;s not that other methods prevent experimentation; the point is that French Press allows a lot of experimentation. It&rsquo;s a plus for <em>this</em> technique, not a minus for others. Experimenting will let you refine factors that work for you. It took me 1 year with 10 different coffees and 300+ cups to settle on something I like, and now it&rsquo;s been 5 more years since then. I can brew a cup I like with precision, but I still keep trying things out. Most coffee lovers do.</p>

<p>Some outcomes from my early experiments:</p>

<ul>
<li>I found that dark roasts need precise timing; otherwise, they over-extract quickly.</li>
<li>I typically prefer a 1:13 coffee to water ratio, but this changes with different coffees. Some of the lighter roasts I buy work better with 1:12</li>
<li>I discovered that I like Central American coffees over other coffees.</li>
<li>Brewing longer than suggested times doesn&rsquo;t necessarily make a more potent brew, but it does make a bitter brew.</li>
<li>Under-extracted coffee has a distinctly sour taste</li>
<li>Boiling water works just as well with French Press, as the recommended 195ºF</li>
</ul>


<h3>With French Press, it&rsquo;s easier to brew coffee that isn&rsquo;t bitter</h3>

<p>Bitterness is a downer for a large majority. You grow out of it. You learn to embrace some bitter and accept it as a part of the coffee taste. But in the beginning, when you can&rsquo;t brew consistently, it is a significant impediment to learning. Both Pour-over and AeroPress™ take precise techniques to make a smooth, low bitterness extraction. Not French Press. Get a good light roast or medium roast coffee.</p>

<p>That ease of experimenting we discussed earlier helps with this too. Too bitter? Increase the grind size. Change the ration—lower the temperature, etc.</p>

<h2>Your First Setup</h2>

<p>Settled on French Press as the method of brewing. Now what? You need to buy the equipment. You need only need the following to start with:</p>

<ol>
<li>Good coffee. Of course!</li>
<li>A press pot</li>
<li>A coffee grinder</li>
<li>A weighing scale, preferably with tare</li>
</ol>


<p>What follows is my recommended setup. Some qualities of this setup:</p>

<ol>
<li>Not expensive</li>
<li>It will serve you at least a couple of years</li>
<li>It will not compromise your taste</li>
</ol>


<p>Onward, then.</p>

<h3>1. Good Coffee:</h3>

<p>The BIG question! This is going to differ based on geographies, but these are my stock &ldquo;first&rdquo; recommendations:</p>

<ol>
<li><a href="https://bluetokaicoffee.com/products/m-s-estate-certified-organic?variant=35890488520">MS Estate Organic Arabica</a>. Many sellers, but BlueTokai has been roasting and selling this for the longest time.</li>
<li>Riverdale Estate. Again, many sellers, so go with your favorite. I personally like BlueTokai and CorridorSeven for Riverdale.</li>
<li>Blue Bottle&rsquo;s <a href="https://bluebottlecoffee.com/store/three-africas">Three Africas</a> Blend.</li>
<li>Square Mile&rsquo;s <a href="https://shop.squaremilecoffee.com/products/the-filter-blend">Filter Blend</a>. Many newcomers look down upon blends and tend to prefer Single Origin. A mistake! It&rsquo;s foolish to ignore the coffee masters. Good blends are well worth it.</li>
<li>Parama by Maverick and Farmer</li>
<li>Attikan Estate by BlueTokai</li>
</ol>


<p>Try one, try all. But don&rsquo;t forget to buy whole beans. Freshly ground coffee makes all the difference. If you are unwilling to get a grinder and buy whole beans, you might as well give up.</p>

<h3>2. Your Coffee Maker a.k.a Press Pot</h3>

<p>Buy the <a href="https://www.amazon.com/KONA-Reusable-Stainless-Comfortable-Protecting/dp/B00JTKZR5K?th=1">smallest Kona press pot</a> you can find. No more than 4 cup capacity. If you can&rsquo;t get a Kona, get Cafe Jei or Mueller. All 3 of these have superior filters that leave the sediments and grounds out of your coffee. They also prevent extended brewing. This is important.</p>

<h3>3. Grinder</h3>

<p>You must buy a precision grinder. This is perhaps the most essential part of the setup. Freshly ground coffee makes all the difference and uniform grinding is an absolute must for brewing. Precision usually means buying a conical burr grinder.</p>

<p>The choice between manual and electric is simple. Start at manual. There&rsquo;s something cathartic about the process of grinding the beans.</p>

<p>I recommend the <a href="https://www.savorworksroasters.com/product-page/timemore-chestnut-c2-manual-coffee-grinder">Timemore C</a> series. They&rsquo;re precise and extremely smooth to operate. You can upgrade to a <a href="https://benkibrewingtools.com/shop/ols/products/comandante-coffee-grinder">Comandante</a> —  the best manual grinder money can buy for those with higher budgets.</p>

<p>If you want to jump straight to electric, the Baratza Encore is an unequivocal choice. Sturdy, reliable, precise.</p>

<h3>4. Weighing Scale</h3>

<p>Give up on volumetric measurements. No one tablespoon this and one cup that 🚫. Start with mass measurements. Grams for coffee. Grams for water. And for that, you will need a weighing scale. Any off-the-shelf scale from Amazon works. Here are the things you need:</p>

<ul>
<li>0.5gm precision</li>
<li>Tare functionality</li>
<li>Good reviews</li>
</ul>


<p>Let your budget be a guide.</p>

<p>That is it. These are all the things you need to buy. I assumed you have a phone you can use as a timer, and you can get hot water as needed.</p>

<h2>The recipe</h2>

<p>There is no shortage of excellent brewing guides out there. All popular third-wave coffee roasters and sellers have their own.</p>

<p>Before you read those brewing guides, read this <a href="https://www.homegrounds.co/coffee-grind-chart">grind size guide</a> first. And then this <a href="https://www.homegrounds.co/how-to-use-a-french-press">excellent brewing guide.</a> That&rsquo;s all you&rsquo;ll need. You can refer to other handbooks as you figure things out.</p>

<p>That&rsquo;s all, folks! You have everything you need: Motivation to make good coffee, necessary equipment, some knowledge, and coffee beans. Start making your coffee and experimenting and finding your taste!</p>

<p>Happy brewing! ☕</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes from 'Blind Spots of the Developer Entrepreneur']]></title>
    <link href="http://info.pagnis.in/blog/2020/07/11/notes-from-developer-entrepreneur-talk/"/>
    <updated>2020-07-11T22:45:00+05:30</updated>
    <id>http://info.pagnis.in/blog/2020/07/11/notes-from-developer-entrepreneur-talk</id>
    <content type="html"><![CDATA[<p>At the 2017 MicroConf, <a href="https://twitter.com/r00k">Ben Orenstein</a> spoke about &ldquo;The Blind Spots of the Developer Entrepreneur&rdquo;. It was <a href="https://www.youtube.com/watch?v=n078RDNz6jY">a talk packed with insights</a> and actionable advice for the developer-entrepreneur.</p>

<p>The target audience for the talk is someone who wants to start their own business but hasn&rsquo;t begun. But even if you don&rsquo;t fit this criterion, it still offers value in the methodical approach it prescribes.</p>

<p>Personally, the talk resonated with me and renewed my interest in wanting to teach and building a viable business out of teaching.</p>

<p>Here are my notes from the talk. The points are his, the phrasing is mine.</p>

<!-- more -->


<h2>Part 1: First steps 👣</h2>

<p>The talk is prescriptive. Why? Because when you are starting, you need someone to give you specific instructions.</p>

<p>Progress over perfection. Move that needle.</p>

<p>Ben used an apt analogy of cooking: It would help a great deal if you had recipes when you begin. But you evolve into experimentation only after you cross an expertise threshold.</p>

<p>He also shared his journey as a maker where he started teaching Vim to other developers, a topic he was passionate about. This journey ended up creating a well-loved platform that came to be known as &ldquo;Upcase&rdquo; by ThoughtBought.</p>

<p>He&rsquo;s been there and done that.</p>

<p>There are 2 phases to the beginner&rsquo;s journey.</p>

<h3>Phase 1: Teach 🎓</h3>

<p>The first big question: <strong>What do I teach?</strong></p>

<p><em>What would&rsquo;ve saved you agony if you knew it when you were working on something?</em></p>

<p><em>What are people asking you about?</em> This prompt is useful since it indicates that you already evoke some trust in others.</p>

<p><em>What are some things you spend much time on or enjoy doing that other people find annoying?</em> Ben gave an anecdotal example of his friend, who <em>loved</em> spending time on invoices and timesheets and chose his first product from this habit: invoicing for freelancers. A much-dreaded task for a vast majority of freelancers.</p>

<p>The second big question: <strong>How do I teach?</strong></p>

<p>Start small, personal, and free.</p>

<ul>
<li>Teach co-workers something related to their everyday work</li>
<li>Give lightning talks at conferences and meetups &mdash; they&rsquo;re an excellent avenue for packing insights into one short, concise session.</li>
<li>An informal Hangouts/Zoom session</li>
</ul>


<p>When you teach, don&rsquo;t just teach, interact. 🗣️</p>

<ul>
<li>Ask people about themselves</li>
<li>Where they work</li>
<li>What excited them about attending this session</li>
<li>What was the best thing they learned</li>
<li>What were the problems</li>
</ul>


<p>These questions and their answers reveal astonishing details about your teachings. You can use those to refine and get better. <em>Get better.</em></p>

<p>As you start teaching, and people start learning from you, you need a way to keep in touch &mdash; collect their emails. You don&rsquo;t have to start a newsletter right away, find a way to inform them of your new content.</p>

<h3>Phase 2: Pre-sell an info product</h3>

<p><strong>Goal: Sell <em>one</em> copy to <em>one</em> stranger.</strong> 🤝</p>

<p>Never start with a SaaS unless you have research to prove the merit; they&rsquo;re much harder to sell.</p>

<p>Start with an info product. A guide. A book. Tutorials.</p>

<p><em>Write one chapter through a process of complete immersion.</em></p>

<p>Take 4-5 days off from your schedule. Focus heavily &mdash; ignore everything else you can ignore. Don&rsquo;t write the introduction or pitch; write a meaty chapter. Go down the trenches and write one of the book&rsquo;s central chapters. And write the table of contents.</p>

<p>Tell them what you&rsquo;re going to tell them. 🎙️</p>

<p>Create a sales page on Leanpub or Gumroad or a similar service. Do not attempt to write code for this sales page. Nope. Have a page ready where people can pay you money and buy your book. Before. You. Complete. It.</p>

<p>Don&rsquo;t wait for inspiration. It will come in leaps and bounds when you find success. Even micro-success brings inspiration.</p>

<p>Ben alludes to a survey he did at the conference, where it turned out that about 50% of the attendees had $0 revenue because they hadn&rsquo;t started. And about 50% of the attendees felt inspired, and the rest didn&rsquo;t.</p>

<p>And there was substantial overlap with those who did not yet feel inspired and those who had not started.</p>

<p>Don&rsquo;t wait for inspiration. Put in the work.</p>

<p>Get started &ndash;> Small success &ndash;> Inspiration &ndash;> More work &ndash;> More success</p>

<p>Ben mentioned the thrill he felt when he put up a $9 video about getting better at Vim, and strangers bought it. 💰</p>

<p>Recommended reading: <a href="https://www.goodreads.com/book/show/1319.The_War_of_Art">The War of Art</a></p>

<h2>Part 2: Ben&rsquo;s Ten Best Tactics</h2>

<p>We have a Ben 10 here.</p>

<p>These don&rsquo;t necessarily apply to beginners or info products. They are appropriate for all digital businesses.</p>

<p><strong> 1️⃣ </strong> Create a recurring reminder to run a pricing test every six months.</p>

<p>Raise your rates. Hide your lowest pricing tier.</p>

<p>There are numerous examples of people doubling and tripling their prices, and still growing.</p>

<p><strong> 2️⃣ </strong> Create an email course. Drip it over 4-5 days. Make it a good, tight content based on genuine value. Remember the &ldquo;what to teach&rdquo; lessons.</p>

<p><strong> 3️⃣ </strong> Integrate and partner with other businesses and products &mdash; a potent formula for creating win-win situations.</p>

<p>Here, Ben shared two examples:</p>

<ul>
<li>A Zapier integration they did, which led to Zapier covering them in a blog post, which in turn led to a massive uptick in customers</li>
<li>He struck a partnership with a competing product with a slightly different niche, leading to an additional $100k revenue for both of them in a span of weeks.</li>
</ul>


<p><strong> 4️⃣ </strong> Sell annual plans. There are a lot of nifty patterns around yearly billing. The reason they work is that they&rsquo;re mutually beneficial.</p>

<p><strong> 5️⃣ </strong> Put faces near things you want people to click. Humans beings are drawn to faces by nature.</p>

<p>Think CTAs, subscribe buttons. Put faces.</p>

<p><strong> 6️⃣ </strong> Try a diving-save. Reach out personally to someone who churned and make an offer that&rsquo;s well worth it. Figure out why someone is canceling and use that to offer some value around it. e.g., you get a cancellation because the student does not have time to work through. Offer them a discounted annual pack so that they have additional time.</p>

<p><strong> 7️⃣ </strong> Start a podcast. A great way to get industry-famous people to talk about you. A great way to get traffic and attention. Podcasts have a vast audience. Utilize it.</p>

<p><strong> 8️⃣ </strong> Manually onboard customers. Yes, for real. Get on a screen sharing call with them and ask them to walk you through as they sign up and start using your service.</p>

<p>It will open up your blindspots and delight you. Or make you cry. Improvements either way!</p>

<p><strong> 9️⃣ </strong> Double down on things that work. You might feel the need to be experimentative or creative, but instead, focus on things that work. It works.</p>

<p><strong> 🔟 </strong> Ask for help.</p>

<p>Ask successful people in the same industry. You will be surprised how willing people are to help. As a corollary, be prepared to help others.</p>

<p><strong>Fin.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Behavioral Science and the Art of Spending Less]]></title>
    <link href="http://info.pagnis.in/blog/2020/05/31/spending-less/"/>
    <updated>2020-05-31T20:30:05+05:30</updated>
    <id>http://info.pagnis.in/blog/2020/05/31/spending-less</id>
    <content type="html"><![CDATA[<p>There are four popular ways of growing your wealth:</p>

<ol>
<li>Spending less</li>
<li>Investing wisely</li>
<li>Earning more</li>
<li>Getting lucky</li>
</ol>


<p>They all differ in their effectiveness and difficulty of implementation.</p>

<ol>
<li>Spending less:  the easiest of all</li>
<li>Investing wisely: difficult; requires expertise</li>
<li>Earning more: not easy, but the most effective</li>
<li>Getting lucky: ¯\_(ツ)_/¯</li>
</ol>


<p>&ldquo;Spending less&rdquo; is the low hanging fruit out of the four. It&rsquo;s directly tied to human behavior, and we can apply techniques backed by research to help us spend less.</p>

<!-- more -->


<h2>The Science</h2>

<p>The <a href="https://www.behaviormodel.org/">Fogg Behavior Model</a> states that behavior occurs at the intersection of 3 things:</p>

<ol>
<li><em>Prompt</em> for an action</li>
<li><em>Motivation</em> to do the action</li>
<li><em>Ability</em> to perform the action</li>
</ol>


<p><img src="http://info.pagnis.in/assets/b-eq-map_small@2x.jpg" alt="Fogg Behavior Model" width="75%" /></p>

<p><sub>Image used with appropriate permission from BJ Fogg</sub></p>

<p>Some examples:</p>

<ul>
<li>Upon encountering a bug 🐞 in the Linux OS (<em>prompt</em>), I may have a strong desire (<em>motivation</em>) to submit a patch to the Linux kernel, but it&rsquo;s well beyond my <em>ability</em> to do so. I will not do it. 😅</li>
<li>After brushing my teeth in the morning (<em>prompt</em>), I can easily do 20 pushups (<em>ability</em>). But. I. Just. Want. My. Coffee. ☕ (<em>motivation</em>)</li>
<li>I see a bowl of cashews and dates on the dinner table (<em>prompt</em>). I love dates (<em>motivation</em>). I will pick them up and eat (<em>ability</em>)</li>
</ul>


<p><strong>To summarise:</strong></p>

<p>When we&rsquo;re prompted to act, if we have the <em>ability</em> to do it <strong>and</strong> high enough a <em>motivation</em> to do it, we do it. If either is lacking, we don&rsquo;t.</p>

<p>Spending falls in this same model.</p>

<ul>
<li>You&rsquo;re on Twitter, someone tweets a picture of something enticing you&rsquo;ve been thinking buying, you go to Amazon and buy it with a few clicks. ✅</li>
<li>A friend tells you about an excellent book they&rsquo;re reading; you go to Goodreads, find the reviews and descriptions. You&rsquo;re convinced. You buy. ✅</li>
<li>You hear about a great electric bike that looks fabulous and seems like a perfect fit for you. You notice the price is way out of your budget. You don&rsquo;t buy it. 🚫</li>
</ul>


<p>So how do we use what we learned above? Often the easiest way is to remove the prompts. It works like a charm. But it&rsquo;s not always possible. The prompts <em>will</em> occur, and we will have to rely on reduced motivation and reduced ability to prevent the action.</p>

<h2>A strategy for minimizing spending</h2>

<ul>
<li>Figure out a reasonable expenditure cap for your household, say ₹ X0,000/month 💸</li>
<li>This includes all outgoing: rents, EMIs, groceries, eat-outs, credit card payments, shopping, what have you. 🏠 🛍️ 🥘 (Review this figure twice a year)</li>
<li>Dedicate an account for these expenses. Each month, put this amount there. Direct ALL YOUR SPENDING to <em>this</em> account. <em>All.</em> 🔑</li>
<li>When you run out of money in this account, DO NOT SPEND. 🙅🏼‍♂️ 🚫</li>
<li>If you use credit cards, you can only spend what you have in THIS ACCOUNT. No more. No converting into EMIs. 💳</li>
<li>Do not deviate far from your personality. e.g., I love occasional shopping and splurging, and so I account for it. Moderation is key. Without it, you will fall off the wagon quickly. ✋🏼 🛑</li>
<li>If you can, rely on spouses, partners, parents, children for accountability. Return the favor and be accountable for them. 👪</li>
<li>Account for annual, non-monthly, and aperiodic expenses. Insurance policies, vacations, school fees, furniture, laptops, what have you.  🎒 🏖 🏔️ 💻</li>
<li>Distribute the amount monthly. Put it in liquid funds (consult experts for this) connected to the same spending account. 💰</li>
<li>Direct ALL THOSE EXPENSES to <em>this</em> account. <em>All.</em> 🔑</li>
<li>Seeding/overdraft: Sometimes significant expenses come before you&rsquo;ve accrued enough in the expense account. Have an overdraft margin for it and treat it as a loan to yourself.</li>
<li>A reasonable limit allows you to spend just enough to have a happy lifestyle and yet limits spending. ⚖️</li>
</ul>


<h2>Parting thoughts</h2>

<p>We accepted that spending prompts <em>will</em> occur. By decreasing our ability to spend we&rsquo;ve pushed the prompt from action zone to no action zone.</p>

<p>Relying on motivation alone is a strategy fraught with peril. By gaming ability and prompts, you can prevent bad behavior or encourage good behavior. Spending less is just one tiny application of this powerful technique.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Postgres Text Search: Simple, Adequate]]></title>
    <link href="http://info.pagnis.in/blog/2017/06/18/postgres-text-search-simple-adequate/"/>
    <updated>2017-06-18T00:00:00+05:30</updated>
    <id>http://info.pagnis.in/blog/2017/06/18/postgres-text-search-simple-adequate</id>
    <content type="html"><![CDATA[<p>Searching for text within your data is a frequently requested feature, and often leads to excellent UX.  Gmail&rsquo;s web interface is entirely built on top of search. No wonder databases have supported basic text search operators like ~, LIKE, ILIKE etc for a long time.  But they often fall short or give inaccurate results, as we try to evolve the feature.  Say, searching in multiple languages, or searching for different variants of the same word: consider realistically, realistic, and realist, or <a href="https://www.google.co.in/#q=ruby+-jewel">searching one word, but not the other</a>.</p>

<p>This is where full-text search comes in.  <!-- more --> Postgres ships with excellent full-text search capabilities which allow us to implement text search in our application without incurring additional dependencies and operational overhead.  More over, having a built-in search allows us to compose search with other existing queries and procedures.  When I say excellent capabilities, I mean fully-featured.  And when I say fully-featured, I mean that it supports stemming, search relevance, search highlights, fuzzy matching, and multiple languages.</p>

<p>In this post, we&rsquo;ll look at basic text search.  In particular, we&rsquo;ll look at the fundamental components of a text search, and how to use them.</p>

<p><strong>Document</strong></p>

<p>This is the source data within which we intend to search. Typically spread across multiple columns. Now, I know any search worth its salt must be able to search across multiple rows in multiple tables, but we&rsquo;ll come to that bit a little later in the post.  Postgres offers a function <code>to_tsvector</code> to obtain a search document from text.  It accepts text as an argument, and returns tsvector of the text.</p>

<p>```sql</p>

<pre><code>-- Example 1a: tsvector
=# SELECT
   to_tsvector('With great power, comes great responsibility!')
   AS document;

                document
--------------------------------------------
 'come':4 'great':2,5 'power':3 'respons':6
(1 row)

-- Example 1b: have strings, will concat
=# SELECT
   to_tsvector('With great power' || ' ' || 'comes great responsibility!')
   AS document;

                  document
--------------------------------------------
 'come':4 'great':2,5 'power':3 'respons':6
(1 row)

-- Example 1c: have tsvectors, will concat
=# SELECT
   to_tsvector('With great power')
   || to_tsvector('comes great responsibility!')
   AS document;

                  document
--------------------------------------------
 'come':4 'great':2,5 'power':3 'respons':6
(1 row)
</code></pre>

<p>```</p>

<p>A few things are noticeable:</p>

<ol>
<li>Punctuation is gone, so is &lsquo;with&rsquo;.  All commonly occurring words that don&rsquo;t have search relevance, such as &lsquo;with&rsquo;, are removed from the documents.  These differ from language to language, and are called &ldquo;stop words&rdquo;.</li>
<li>Words are reduced to a base form. These are called as &ldquo;<a href="https://www.postgresql.org/docs/current/static/textsearch-intro.html">lexemes</a>&rdquo;; they are nothing but normalised forms of words, a term taken from <a href="https://en.wikipedia.org/wiki/Lexeme">linguistics</a>.</li>
<li>The lexemes are sorted alphabetically, There are numbers associated with the lexemes.</li>
<li>The tsvectors can be concatenated, <em>or</em> can operate on concatenated strings</li>
</ol>


<p>If you want to dig deeper into how the search actually works, these are some of the things you can read about.  For now, we&rsquo;ll focus on just one thing from this:  the to_tsvector accepted our text input, and returned a searchable value.</p>

<p>As a side note, I really like this examples driven approach to learning.  Code and examples make for easier understanding of the subject, and give the reader a starting point to dig deeper.  In that spirit, this blog post is a repl-driven-blog-post.</p>

<p><strong>Query</strong></p>

<p>The term we wish to search for.  Typically a word or a phrase , but can be any text. Even a full document if you will. For obtaining a query object from the given search string, Postgres has two functions: <code>to_tsquery</code> and <code>plainto_tsquery</code>. <code>to_tsquery</code> allows us to use control characters like wildcards, but is a lot stricter with the input. <code>plainto_tsquery</code> on the other hand doesn&rsquo;t use control characters, but escapes all the input, and is safe from SQL injection.  In this post we&rsquo;ll only look at to_tsquery since it falls in line with our &ldquo;fully featured&rdquo; requirement.</p>

<p>```sql</p>

<pre><code>-- Example 2: tsquery
=# SELECT to_tsquery('responsibility');
 to_tsquery
------------
 'respons'
(1 row)

-- Example 3: tsquery multiple words, with escaping
=# SELECT to_tsquery('great\ responsibility');
     to_tsquery
---------------------
 'great' &amp; 'respons'
(1 row)

-- Example 4: Wildcard search
=# SELECT to_tsquery('Eliz:*');
 to_tsquery
------------
 'eliz':*
(1 row)

-- Example 5: Intersection (AND-ing)
=# SELECT to_tsquery('Barry') &amp;&amp; to_tsquery('Allen');
     ?column?
-------------------
 'barri' &amp; 'allen'
(1 row)

-- Example 5: Union (OR-ing)
=# SELECT to_tsquery('Barry') || to_tsquery('Wally');
     ?column?
-------------------
 'barri' | 'walli'
(1 row)
</code></pre>

<p>```</p>

<p>Examples demonstrate the various usages of to_tsquery.  Wildcards, AND and OR do exactly what you&rsquo;d expect them to do.  The key takeaway is that, these are just regular functions, like <code>LOWER</code>, <code>LENGTH</code> and so we can just use them in <em>any</em> query.</p>

<p>```sql</p>

<p>&mdash; Example 6
=# SELECT
   name,
   to_tsvector(name) AS document
   FROM states
   ORDER BY name ASC
   LIMIT 10;</p>

<pre><code>     name         |         document
</code></pre>

<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;
 Alabama              | &lsquo;alabama&rsquo;:1
 Alaska               | &lsquo;alaska&rsquo;:1
 Arizona              | &lsquo;arizona&rsquo;:1
 Arkansas             | &lsquo;arkansa&rsquo;:1
 California           | &lsquo;california&rsquo;:1
 Colorado             | &lsquo;colorado&rsquo;:1
 Connecticut          | &lsquo;connecticut&rsquo;:1
 Delaware             | &lsquo;delawar&rsquo;:1
 District of Columbia | &lsquo;columbia&rsquo;:3 &lsquo;district&rsquo;:1
 Florida              | &lsquo;florida&rsquo;:1
(10 rows)</p>

<p>```</p>

<p><strong>Putting document and query together</strong></p>

<p>Now the question arises: How to actually use tsvector and tsquery?  Enter the <code>@@</code> operator.  This is the operator that actually performs the search. Examples work the best, so let&rsquo;s search for a US State with the word &ldquo;North&rdquo; in it:</p>

<p>```sql</p>

<p>=# SELECT</p>

<pre><code> name,
 to_tsvector(name) AS document
</code></pre>

<p>   FROM states
   WHERE to_tsvector(name) @@ to_tsquery(&lsquo;north&rsquo;)
   ORDER BY name ASC;</p>

<pre><code>  name      |        document
</code></pre>

<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
 North Carolina | &lsquo;carolina&rsquo;:2 &lsquo;north&rsquo;:1
 North Dakota   | &lsquo;dakota&rsquo;:2 &lsquo;north&rsquo;:1
(2 rows)</p>

<p>```</p>

<br/>


<p>Or, let&rsquo;s search for a state that has a word that starts with &ldquo;CA&rdquo;:</p>

<p>```sql</p>

<p>=# SELECT</p>

<pre><code> name,
 to_tsvector(name) AS document
</code></pre>

<p>   FROM states
   WHERE to_tsvector(name) @@ to_tsquery(&lsquo;ca:*&rsquo;)
   ORDER BY name ASC;</p>

<pre><code>  name      |        document
</code></pre>

<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
 California     | &lsquo;california&rsquo;:1
 North Carolina | &lsquo;carolina&rsquo;:2 &lsquo;north&rsquo;:1
 South Carolina | &lsquo;carolina&rsquo;:2 &lsquo;south&rsquo;:1
(3 rows)</p>

<p>```</p>

<p>And that is your standard text search spanning multiple rows of a table.  A friendly, neighbourhood text-search is just a WHERE clause away! Another clear takeaway here is that any <code>@@</code> operation is no different from your average <code>=</code> operation.  Naturally, a multi-table search is just a join away. Multi-column searches are just a concatenation away.</p>

<p>However, what I like about this idea is that I can now compose this search with my existing SQL queries.  Let&rsquo;s say I have a query for &ldquo;all contacts of a user that have a facebook profile&rdquo;, and now I can &ldquo;name search&rdquo; in just this subset.  To me, this is the best use-case of having the search built-in.  Composability is a very powerful design pattern.</p>

<p>A note on <code>NULL</code>s:  As with everything in Postgres, text-search doesn&rsquo;t quite work well with NULLs.  If you have null columns, <a href="https://www.postgresql.org/docs/9.6/static/functions-conditional.html">COALESCE</a> is your friend, use it liberally!</p>

<p><strong>Search relevance and rankings</strong></p>

<p>Searches are often centered around finding &ldquo;all matching documents&rdquo;, rather than finding a specific document.  In its most basic form, search relevance boils down to two questions:</p>

<ol>
<li>How do I rank the results returned by the search?</li>
<li>How do I control the ranking based on my context and requirements?</li>
</ol>


<p>Answer to the first question is the <code>ts_rank</code> function.  It accepts a tsvector and a tsquery as an argument, and returns the &ldquo;rank&rdquo;; which is a bit of a misnomer, because unlike a regular rank, where 1 is better than 2 is better than 3, this rank has the property &ldquo;higher the better&rdquo;.  It&rsquo;s best used in the ORDER clause.  Here&rsquo;s an example, searching all people whose name starts with &ldquo;Eliz&rdquo;. If that sounds odd, think autocomplete :</p>

<p>```sql</p>

<p>=# SELECT</p>

<pre><code> first_name,
 ts_rank(to_tsvector(first_name), to_tsquery('eliz:*')) as rank
</code></pre>

<p>   FROM person_names
   WHERE to_tsvector(first_name) @@ to_tsquery(&lsquo;eliz:*&rsquo;)
   ORDER BY rank DESC
   LIMIT 10;</p>

<p>   first_name    |   rank
&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;
 Elizabeth Eliza | 0.1215850
 Elizabeth       | 0.0607927
 Elizabeth       | 0.0607927
 Elizabeth       | 0.0607927
 Elizabeth       | 0.0607927
 Elizabeth       | 0.0607927
 Elizabeth       | 0.0607927
 Elizabeth       | 0.0607927
 ELIZABETH       | 0.0607927
 Elizabeth       | 0.0607927</p>

<p>```</p>

<p>I think you will find that absolute rank isn&rsquo;t as useful as being able to order results by it.  That brings us to the next question, how can the ts_rank function be configured?  Say, you are searching blog posts, and want a match in title to carry more weight than a match in the body.  For this, Postgres offers &ldquo;weights&rdquo;.  The weights are called as A, B, C and D, in the order of precedence.  The default value for these weights are 1.0, 0.4, 0.2, 0.1.  Which means a match with A carries 10 times more weight than a match with D.</p>

<p>Think of these weights as &ldquo;tags&rdquo;, i.e. you tag a tsvector as A or B or C or D, and specify which tags carry how much weight. With that, Postgres will yield appropriate rank.  The tags analogy will make more sense once we look at how tsquery uses these weights.  Here&rsquo;s a query to demonstrate using weights in tsvector:</p>

<p>```sql</p>

<p>=# SELECT ts_rank(</p>

<pre><code>       setweight(to_tsvector('With great power'), 'A') ||
       setweight(to_tsvector('comes great responsibility!'), 'D'),
       to_tsquery('power'))
</code></pre>

<p>  AS rank;</p>

<h2>   rank</h2>

<p> 0.607927
(1 row)</p>

<p>=# SELECT ts_rank(</p>

<pre><code>       setweight(to_tsvector('With great power'), 'A') ||
       setweight(to_tsvector('comes great responsibility!'), 'D'),
       to_tsquery('responsibility'))
</code></pre>

<p>   AS rank;</p>

<h2>   rank</h2>

<p> 0.0607927
(1 row)</p>

<p>```</p>

<p>Our document here is made up of two parts, &ldquo;with great power&rdquo;, tagged A, and &ldquo;comes great responsibility&rdquo;, tagged D.</p>

<p>The rank for &ldquo;power&rdquo; is 10 times higher than &ldquo;responsibility&rdquo; when searching this document, because &ldquo;power&rdquo; is in group A, while responsibility is in group D.  Without the weights, or with same weights to all components, they will have the same rank.</p>

<p>The default assignment of weights A = 1, B = 0.4, C = 0.2 and D = 0.1 can be changed.  Refer to the documentation for variations of <code>ts_rank</code> that accept weights as an argument.  Playing around with the values in the psql console would give you an idea what works best for you.  I&rsquo;ve often found that the default values really do work the best.</p>

<p>Coming back to the tags analogy, these same weights can also be assigned to a tsquery object, and the query would then match only amongst the given weight groups. Quite like a &ldquo;filter&rdquo;.  This allows for features like &ldquo;match this, but not that&rdquo;.  Have a look:</p>

<p>```sql</p>

<p>=# SELECT setweight(to_tsvector(&lsquo;With great power&rsquo;), &lsquo;A&rsquo;)</p>

<pre><code> || setweight(to_tsvector('comes great responsibility!'), 'A')
 @@
 to_tsquery('resp:*B')
</code></pre>

<p>  AS is_match;</p>

<h2> is_match</h2>

<p> f
(1 row)</p>

<p>=# SELECT setweight(to_tsvector(&lsquo;With great power&rsquo;), &lsquo;A&rsquo;)</p>

<pre><code> || setweight(to_tsvector('comes great responsibility!'), 'A')
 @@
 to_tsquery('resp:*A')
</code></pre>

<p>   AS is_match;</p>

<h2> is_match</h2>

<p> t
(1 row)</p>

<p>```</p>

<p>The <a href="https://www.postgresql.org/docs/current/static/textsearch-controls.html">official documentation</a> about controlling text search is quite good, and detailed.  I highly recommend that you read at least this section of the documentation, if not all of it.</p>

<p>This concludes the post about basic full-text search in Postgres. Have fun searching!  Do let me know what curious cases you tried out with tsquery and tsvectors.</p>

<p>In a follow-up post, we&rsquo;ll look at improving search performance by indexing, fuzzy matching, text highlighting and supporting multiple languages.</p>

<!-- Links -->



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Console your gems: Add REPL to them]]></title>
    <link href="http://info.pagnis.in/blog/2014/04/28/console-repl-for-your-gems/"/>
    <updated>2014-04-28T12:27:34+05:30</updated>
    <id>http://info.pagnis.in/blog/2014/04/28/console-repl-for-your-gems</id>
    <content type="html"><![CDATA[<p>When you are working on a Ruby gem or a Ruby library ( why you would have a Ruby library that isn&rsquo;t a gem is beyond me ), it is <s>always</s> often desirable to have a Pry session loaded with the gem your working on.  In fact, I&rsquo;ll go out on a limb and say that REPL driven development is a a must-do when writing libraries.  REPLs are like ice added to your beer when it isn&rsquo;t cold anymore, except this ice is made from the same beer.</p>

<!-- more -->


<p>A lot of gems ship with this functionality, but if not, it is extremely easy to add one.  To avoid polluting every gem with our code, we can utilize the concept of Rake&rsquo;s global tasks.  Rake&rsquo;s default source for looking at tasks or <span title="Google it">rules</span> is the Rakefile and all files that are declared as source files in the Rakefile; typically <code>*.rake</code> files in your tasks folder, but this can vary depending on your project.  However, rake also looks at <code>~/.rake/*.rake</code> if we ask it to. So let&rsquo;s create a file called <code>~/.rake/console.rake</code> and add the following task to it:</p>

<p>```ruby</p>

<pre><code>desc "Open a pry (or irb) session preloaded with this gem"
task :console do
  begin
    require 'pry'
    gem_name = File.basename(Dir.pwd)
    sh %{pry -I lib -r #{gem_name}.rb}
  rescue LoadError =&gt; _
    sh %{irb -rubygems -I lib -r #{gem_name}.rb}
  end
end
</code></pre>

<p>```</p>

<p>And run our shiny new rake task:</p>

<p>```</p>

<pre><code>➜  awesome_sauce git:(master) ✗ rake console
rake aborted!
Don't know how to build task 'console'

(See full trace by running task with --trace)
</code></pre>

<p>```</p>

<p>Bummer! Let&rsquo;s double check:</p>

<p>```</p>

<pre><code>➜  awesome_sauce git:(master) ✗ rake -T console
</code></pre>

<p>```</p>

<p>Nothing! What gives?  Not a cause of worry, because this is the expected behaviour, and we have a failing test. Rake takes global pollution quite seriously, and <em>does not</em> load the global tasks unless asked to.  So let&rsquo;s ask rake to do so, by adding a <code>-g</code> flag.  Because, you know, g for global:</p>

<p>```</p>

<pre><code>➜  awesome_sauce git:(master) ✗ rake -gT console
rake console  # Open a pry (or irb) session preloaded with this gem
</code></pre>

<p>```</p>

<p>And subsequently</p>

<p>```</p>

<pre><code>➜  awesome_sauce git:(master) ✗ rake -g console
pry -I lib -r awesome_sauce.rb
2.1.1 (main):0 &gt;
# Just to be sure
2.1.1 (main):0 &gt; ^D
➜  awesome_sauce git:(master) ✗ cd ../secret_sauce
➜  secret_sauce git:(hush-hush) ✗ rake -g console
rbx-2.1.1 (main):0 &gt;
</code></pre>

<p>```</p>

<p>With this, I bow out and promise to come back with more palatable content later.</p>

<p><strong>Edit</strong>: As <a href="https://twitter.com/emilsoman">Emil</a> pointed out, <code>pry</code> uses the same trick in <code>pry --gem</code><a href="https://github.com/pry/pry/blob/01360a684443f9e516578566afe6f41d92f63419/lib/pry/cli.rb#L209"><sup>#</sup></a>.</p>
]]></content>
  </entry>
  
</feed>
